.\" Man page generated from reStructuredText.
.
.TH SKOGUL 1 "" "" ""
.SH NAME
skogul \- Skogul
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
skogul \-file config\-file [\-show]

skogul [\-help | \-show | \-make\-man]
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DESCRIPTION
.sp
Skogul is a generic tool for moving metric data around. It can serve as a
collector of data, but is primarily designed to be a framework for building
bridges between data collectors and storage engines.
.sp
These bridges can be simple \- accept data on HTTP, write to influxdb \- or
complex: Accept data on unencrypted http, batch data together, forward it
to a remote skogul\-instance over a password\-protected, encrypted HTTPS
channel, if that fails, write to a local queue and retry periodically.
.sp
To facilitate this, Skogul has three core components:
.INDENT 0.0
.IP 1. 3
Receivers acquire raw data
.IP 2. 3
Handlers turns raw data into meaningful content
.IP 3. 3
Senders determine what happens to the data
.UNINDENT
.sp
A single instance of Skogul must have at least one receiver, but can have
multiple. It also, typically, must have at least one handler and sender.
.sp
Senders come in two distinct but interchangeable variants: Storage\-oriented
senders are used to send the data to some external resource, e.g., a time
series database like InfluxDB. Utility\-oriented senders are used to add
logic, such as error handling or duplicating data to multiple storage
systems.
.sp
There are more examples in the the "examples/" directory.
.SH OPTIONS
.INDENT 0.0
.TP
.B \fB\-file\fP string
Path to skogul config to read. (default ~/.config/skogul.json)
.TP
.B \fB\-help\fP
Print more help (default false)
.TP
.B \fB\-make\-man\fP
Output RST documentation suited for rst2man (default false)
.TP
.B \fB\-show\fP
Print the parsed JSON config instead of starting (default false)
.UNINDENT
.SH CONFIGURATION
.sp
Configuration of skogul is done with a json config file, referenced with
the \-file option. You need to specify at least one receiver, handler and
sender to make something sensible.
.sp
The base configuration set is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "receivers": {
    "xxx": {
      "type": "type\-of\-receiver",
      type\-specific\-options
    },
    "other\-receiver...": ...
  },
  "handlers": {
    "yyy": {
      "parser": "json", // other options might come
      "transformers": [...], // only valid option today is [] or ["templater"]
      "sender": "reference\-to\-sender"
    }
  },
  "senders": {
    "zzz": {
      "type": "type\-of\-sender",
      type\-specific\-options
    },
    "qqq": {
      "type": "type\-of\-sender",
      type\-specific\-options
    },
    ...
  }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the above pseudo\-config, "xxx", "yyy", "zzz" and "qqq" are arbitrary
names you chose that are how to reference that specific item within the same
configuration. The "type" field references what implementation to use \- each
implementation have different configuration options. You can specify as many
senders, receivers and handlers as you want, and they can cross\-reference
each other.
.sp
Upon start\-up, all receivers are started.
.sp
It is valid to have multiple receivers use the same handler. It is also
valid for multiple senders to reference the same sender. It is up to the
operator to avoid setting up feedback loops.
.sp
At present time, there is only a single parser and a single transformer, so
handlers mainly serve to name the next/initial sender for a receiver.
.sp
The documentation for each sender and receiver also lists all options. In
general, you do not need to specify all options. For formatting, the settings
use whatever JSON unmarshalling logic that Go provides, but it should be self
explanatory or explained in the documentation for the relevant option.
.SH SENDERS
.sp
The following senders exist.
.SS backoff
.sp
Forwards data to the next sender, retrying after a delay upon failure. For each retry, the delay is doubled. Gives up after the set number of retries.
.sp
Aliases: retry
.sp
Settings:
.INDENT 0.0
.TP
.B \fBbase [Duration]\fP
Initial delay after a failure. Will double for each retry
.TP
.B \fBnext [SenderRef]\fP
The sender to try
.TP
.B \fBretries [uint64]\fP
Number of retries before giving up
.UNINDENT
.SS batch
.sp
Accepts metrics and puts them in a shared container. When the container either has a set number of metrics (Threshold), or a timeout occurs, the entire container is forwarded. This allows down\-stream senders to work with larger batches of metrics at a time, which is frequently more efficient. A side effect of this is that down\-stream errors are not propogated upstream. That means any errors need to be dealt with down stream, or they will be ignored.
.sp
Aliases: batcher
.sp
Settings:
.INDENT 0.0
.TP
.B \fBinterval [Duration]\fP
Flush the bucket after this duration regardless of how full it is
.UNINDENT
.sp
\fBnext [SenderRef]\fP
.INDENT 0.0
.TP
.B \fBthreshold [int]\fP
Flush the bucket after reaching this amount of metrics
.UNINDENT
.SS counter
.sp
Accepts metrics, counts them and passes them on. Then emits statistics to the Stats\-handler on an interval.
.sp
Aliases: count
.sp
Settings:
.INDENT 0.0
.TP
.B \fBnext [SenderRef]\fP
Reference to the next sender in the chain
.TP
.B \fBperiod [Duration]\fP
How often to emit stats
.sp
Example(s): 5s
.TP
.B \fBstats [HandlerRef]\fP
Handler that will receive the stats periodically
.UNINDENT
.SS debug
.sp
Prints received metrics to stdout.
.sp
Settings:
.INDENT 0.0
.TP
.B \fBprefix [string]\fP
Prefix to print before any metric
.UNINDENT
.SS detacher
.sp
Returns OK without waiting for the next sender to finish.
.sp
Aliases: detach
.sp
Settings:
.INDENT 0.0
.TP
.B \fBdepth [int]\fP
How many containers can be pending delivery before we start blocking. Defaults to 1000.
.UNINDENT
.sp
\fBnext [SenderRef]\fP
.SS dupe
.sp
Sends the same metrics to all senders listed in Next.
.sp
Aliases: duplicate dup
.sp
Settings:
.sp
\fBnext [[]skogul.SenderRef]\fP
.SS errdiverter
.sp
Forwards data to next sender. If an error is returned, the error is converted into a Skogul container and sent to the err\-handler. This provides the means of logging errors through regular skogul\-chains.
.sp
Aliases: errordivert errdivert errordiverter
.sp
Settings:
.INDENT 0.0
.TP
.B \fBerr [SenderRef]\fP
If the sender under Next fails, convert the error to a metric and send it here
.TP
.B \fBnext [SenderRef]\fP
Send normal metrics here
.TP
.B \fBreterr [bool]\fP
If true, the original error from Next will be returned, if false, both Next AND Err has to fail for Send to return an error.
.UNINDENT
.SS fallback
.sp
Tries the senders provided in Next, in order. E.g.: if the first responds OK, the second will never get data. Useful for diverting traffic to alternate paths upon failure.
.sp
Settings:
.sp
\fBnext [[]skogul.SenderRef]\fP
.SS fanout
.sp
Fanout to a fixed number of threads before passing data on. This is rarely needed, as receivers should do this.
.sp
Settings:
.sp
\fBnext [SenderRef]\fP
.INDENT 0.0
.TP
.B \fBworkers [int]\fP
Number of worker threads in use. To _fan_in_ you can set this to 1.
.UNINDENT
.SS forwardfail
.sp
Forwards metrics, but always returns failure. Useful in complex failure handling involving e.g. fallback sender, where it might be used to write log or stats on failure while still propogating a failure upward.
.sp
Settings:
.sp
\fBnext [SenderRef]\fP
.SS http
.sp
Sends Skogul\-formatted JSON\-data to a HTTP endpoint (e.g.: an other Skogul instance?). Highly useful in scenarios with multiple data collection methods spread over several servers.
.sp
Aliases: https
.sp
Settings:
.INDENT 0.0
.TP
.B \fBinsecure [bool]\fP
Disable TLS certificate validation.
.TP
.B \fBtimeout [Duration]\fP
HTTP timeout.
.TP
.B \fBurl [string]\fP
Fully qualified URL to send data to.
.sp
Example(s): \fI\%http://localhost:6081/\fP \fI\%https://user:password@[::1]:6082/\fP
.UNINDENT
.SS influx
.sp
Send to a InfluxDB HTTP endpoint.
.sp
Aliases: influxdb
.sp
Settings:
.INDENT 0.0
.TP
.B \fBmeasurement [string]\fP
Measurement name to write to.
.TP
.B \fBtimeout [Duration]\fP
HTTP timeout
.TP
.B \fBurl [string]\fP
URL to InfluxDB API. Must include write end\-point and database to write to.
.sp
Example(s): \fI\%http://[::1]:8086/write?db=foo\fP
.UNINDENT
.SS log
.sp
Logs a message, mainly useful for enriching debug information in conjunction with, for example, dupe and debug.
.sp
Settings:
.sp
\fBmessage [string]\fP
.SS mnr
.sp
Sends M&R line format to a TCP endpoint.
.sp
Aliases: m&r
.sp
Settings:
.sp
\fBaddress [string]\fP
.sp
\fBdefaultgroup [string]\fP
.SS mqtt
.sp
Publishes received metrics to an MQTT broker/topic.
.sp
Settings:
.sp
\fBaddress [string]\fP
.SS null
.sp
Discards all data. Mainly useful for testing.
.SS sleep
.sp
Injects a random delay before passing data on. Mainly for testing.
.sp
Settings:
.INDENT 0.0
.TP
.B \fBbase [Duration]\fP
The baseline \- or minimum \- delay
.TP
.B \fBmaxdelay [Duration]\fP
The maximum delay we will suffer
.UNINDENT
.sp
\fBnext [SenderRef]\fP
.INDENT 0.0
.TP
.B \fBverbose [bool]\fP
If set to true, will log delay durations
.UNINDENT
.SS sql
.sp
Execute a SQL query for each received metric, using a template. Any query can be run, and if multiple metrics are present in the same container, they are all executed in a single transaction, which means the batch\-sender will greatly increase performance. Supported engines are MySQL/MariaDB and Postgres.
.sp
Settings:
.INDENT 0.0
.TP
.B \fBconnstr [string]\fP
Connection string to use for database. Slight variations between database engines. For MySQL typically user:password@host/database.
.sp
Example(s): mysql: \(aqroot:lol@/mydb\(aq postgres: \(aquser=pqgotest dbname=pqgotest sslmode=verify\-full\(aq
.TP
.B \fBdriver [string]\fP
Database driver/system. Currently suported: mysql and postgres.
.TP
.B \fBquery [string]\fP
Query run for each metric. ${timestamp.timestamp} is expanded to the actual metric timestamp. ${metadata.KEY} will be expanded to the metadata with key name "KEY", other ${foo} will be expanded to data[foo]. Note that this is sensibly escaped, so while it might seem like it is vulnerable to SQL injection, it should be safe.
.sp
Example(s): INSERT INTO test VALUES(${timestamp.timestamp},${hei},${metadata.key1})
.UNINDENT
.SS test
.sp
Used for internal testing. Basically just discards data but provides an internal counter of received data
.SH RECEIVERS
.sp
The following receivers exist.
.SS fifo
.sp
Reads continuously from a file. Can technically read from any file, but since it will re\-open and re\-read the file upon EOF, it is best suited for reading a fifo. Assumes one collection per line.
.sp
Settings:
.sp
\fBfile [string]\fP
.sp
\fBhandler [HandlerRef]\fP
.SS file
.sp
Reads from a file, then stops. Assumes one collection per line.
.sp
Settings:
.sp
\fBfile [string]\fP
.sp
\fBhandler [HandlerRef]\fP
.SS http
.sp
Listen for metrics on HTTP or HTTPS. Optionally requiring authentication. Each request received is passed to the handler.
.sp
Aliases: https
.sp
Settings:
.INDENT 0.0
.TP
.B \fBaddress [string]\fP
Address to listen to.
.sp
Example(s): [::1]:80 [2001:db8::1]:443
.TP
.B \fBcertfile [string]\fP
Path to certificate file for TLS. If left blank, un\-encrypted HTTP is used.
.TP
.B \fBhandlers [map[string]*skogul.HandlerRef]\fP
Paths to handlers. Need at least one.
.sp
Example(s): {"/": "someHandler" }
.TP
.B \fBkeyfile [string]\fP
Path to key file for TLS.
.TP
.B \fBpassword [string]\fP
Password for basic authentication.
.TP
.B \fBusername [string]\fP
Username for basic authentication. No authentication is required if left blank.
.UNINDENT
.SS log
.sp
Log attaches to the internal logging of Skogul and diverts log messages.
.sp
Settings:
.INDENT 0.0
.TP
.B \fBecho [bool]\fP
Logs are also echoed to stdout.
.TP
.B \fBhandler [HandlerRef]\fP
Reference to a handler where the data is sent.
.UNINDENT
.SS mqtt
.sp
Listen for Skogul\-formatted JSON on a MQTT endpoint
.sp
Settings:
.sp
\fBaddress [string]\fP
.sp
\fBhandler [*skogul.HandlerRef]\fP
.sp
\fBpassword [string]\fP
.sp
\fBusername [string]\fP
.SS stdin
.sp
Reads from standard input, one collection per line, allowing you to pipe collections to Skogul on a command line or similar.
.sp
Settings:
.sp
\fBhandler [HandlerRef]\fP
.SS tcp
.sp
Listen for Skogul\-formatted JSON on a tcp socket, reading one collection per line.
.sp
Settings:
.sp
\fBaddress [string]\fP
.sp
\fBhandler [HandlerRef]\fP
.SS test
.sp
Generate dummy\-data. Useful for testing, including in combination with the http sender to send dummy\-data to an other skogul instance.
.sp
Settings:
.INDENT 0.0
.TP
.B \fBdelay [Duration]\fP
Sleep time between each metric is generated, if any.
.TP
.B \fBhandler [HandlerRef]\fP
Reference to a handler where the data is sent
.TP
.B \fBmetrics [int64]\fP
Number of metrics in each container
.TP
.B \fBthreads [int]\fP
Threads to spawn
.TP
.B \fBvalues [int64]\fP
Number of unique values for each metric
.UNINDENT
.SH HANDLERS
.sp
There is only one type of handler. It accepts three arguments: A parser to
parse data, a list of optional transformers, and the first sender that will
receive the parsed container(s).
.sp
Currently the only valid parser is "json" and the only valid transformer is
"templating".
.SS Templating
.sp
The templating\-transformer is useful for adding identical fields to all
metrics in a collection. If a template is provided, and the
templater\-transformer is applied, all metrics are initialized with whatever
value the template came with.
.sp
This is inteded for when you are sending multiple metrics that share
certain attributes, e.g, they are all from the same machine and all
collected at the same time. Or they are all from the same data center
or region.
.sp
Templates are shallow. If your metric has nested fields, they will not
be merged with what the template provides. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "template": {
    "timestamp": "2019\-09\-27T15:42:00Z",
    "metadata": {
      "site": "naboo",
      "machine": {
        "os": "Debian"
      }
    }
  },
  "metrics": [
    {
      "metadata": {
        "machine": {
          "hostname": "r2d2"
        }
      },
      "data": {
        "something": "blah"
      }
    },
    {
      "metadata": {
        "machine": {
          "hostname": "c3po"
        }
      },
      "data": {
        "something": "duck"
      }
    }
  ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here, the template provides three items: a timestamp, the "site" field and
the "machine" field of metadata. Once transformed, the result will be:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "metrics": [
    {
      "timestamp": "2019\-09\-27T15:42:00Z",
      "metadata": {
        "site": "naboo",
        "machine": {
          "hostname": "r2d2"
        }
      },
      "data": {
        "something": "blah"
      }
    },
    {
      "timestamp": "2019\-09\-27T15:42:00Z",
      "metadata": {
        "site": "naboo",
        "machine": {
          "hostname": "c3po"
        }
      },
      "data": {
        "something": "duck"
      }
    }
  ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Since each metric also provided a "machine"\-field, it overwrote the value
from the template, even if there were no overlapping fields.
.SH JSON FORMAT
.sp
Data sent to Skogul will be parsed to fit the internal data model of Skogul. The
JSON representation is roughly thus:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "template": {
    "timestamp": "iso8601\-time",
    "metadata": {
      "key": value,
      ...
    },
    "data": {
      "key": value,
      ...
    }
  },
  "metrics": [
    {
      "timestamp": "iso8601\-time",
      "metadata": {
        "key": value,
        ...
      },
      "data": {
        "key": value,
        ...
      }
    },
    { ...}
  ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The "template" is optional, see the "Templater"\-documentation above for an
in\-depth description.
.sp
The primary difference between metadata and data is searchability,
and it will depend on storage engines. Typically this means the name
of a server is metadata, but the load average is data. Skogul itself
does not much care.
.SH EXAMPLES
.sp
A minimalistic example that accepts data on HTTP and prints it to standard
output:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "receivers": {
    "api": {
      "type": "http",
      "address": ":8080",
      "handlers": { "/": "myhandler" }
    }
  },
  "handlers": {
    "myhandler": {
      "parser": "json",
      "transformers": ["templater"],
      "sender": "mysender"
    }
  },
  "senders": {
    "mysender": {
      "type": "debug"
    }
  }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The following specifies an insecure HTTP\-based receiver that will wait up
to 5 seconds or 1000 metrics before writing data to InfluxDB:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "receivers": {
    "api": {
      "type": "http",
      "address": "[::1]:8080",
      "handlers": {
        "/": "jsontemplating"
      }
    }
  },
  "handlers": {
    "jsontemplating": {
      "parser": "json",
      "transformers": [ "templater" ],
      "sender": "batch"
    }
  },
  "senders": {
    "batch": {
      "type": "batch",
      "interval": "5s",
      "threshold": 1000,
      "next": "influx"
    },
    "influx": {
      "type": "influx",
      "URL": "http://[::1]:8086/write?db=testdb",
      "measurement": "demo",
      "Timeout": "10s"
    }
  }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
More examples are provided in the examples/ directory of the Skogul source
package.
.SH SEE ALSO
.sp
\fI\%https://github.com/KristianLyng/skogul\fP
.SH BUGS
.sp
Configuration parsing doesn\(aqt provide very helpful errors, and silently
ignores keys/variables that are not used in a specific context.
.sp
Workaround: Use the "\-show" option to display the parsed configuration.
.SH COPYRIGHT
.sp
This document is licensed under the same license as Skogul itself, which
happens to be GPLv2 (or later). See LICENSE for details.
.INDENT 0.0
.IP \(bu 2
Copyright (c) 2019 \- Telenor Norge AS
.UNINDENT
.SH AUTHOR
Kristian Lyngstøl <kly@kly.no>
.\" Generated by docutils manpage writer.
.
