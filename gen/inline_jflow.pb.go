// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inline_jflow.proto

package gen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InlineJflow struct {
	// Version of exported flow records (v10 or v9)
	Ipv4FlowsExportFormat *string `protobuf:"bytes,2,opt,name=ipv4_flows_export_format,json=ipv4FlowsExportFormat" json:"ipv4_flows_export_format,omitempty"`
	Ipv6FlowsExportFormat *string `protobuf:"bytes,3,opt,name=ipv6_flows_export_format,json=ipv6FlowsExportFormat" json:"ipv6_flows_export_format,omitempty"`
	VplsFlowsExportFormat *string `protobuf:"bytes,4,opt,name=vpls_flows_export_format,json=vplsFlowsExportFormat" json:"vpls_flows_export_format,omitempty"`
	MplsFlowsExportFormat *string `protobuf:"bytes,5,opt,name=mpls_flows_export_format,json=mplsFlowsExportFormat" json:"mpls_flows_export_format,omitempty"`
	// Total number of IPv4/IPv6/MPLS routes
	Ipv4RouteRecordCnt *uint32 `protobuf:"varint,6,opt,name=ipv4_route_record_cnt,json=ipv4RouteRecordCnt" json:"ipv4_route_record_cnt,omitempty"`
	Ipv6RouteRecordCnt *uint32 `protobuf:"varint,7,opt,name=ipv6_route_record_cnt,json=ipv6RouteRecordCnt" json:"ipv6_route_record_cnt,omitempty"`
	MplsRouteRecordCnt *uint32 `protobuf:"varint,8,opt,name=mpls_route_record_cnt,json=mplsRouteRecordCnt" json:"mpls_route_record_cnt,omitempty"`
	// Total number of Autonomous System information
	AutonomousSystemRecordCnt *uint32 `protobuf:"varint,9,opt,name=autonomous_system_record_cnt,json=autonomousSystemRecordCnt" json:"autonomous_system_record_cnt,omitempty"`
	// Maximum number of flows supported.
	Ipv4MaxFlowsCount *uint64 `protobuf:"varint,10,opt,name=ipv4_max_flows_count,json=ipv4MaxFlowsCount" json:"ipv4_max_flows_count,omitempty"`
	Ipv6MaxFlowsCount *uint64 `protobuf:"varint,11,opt,name=ipv6_max_flows_count,json=ipv6MaxFlowsCount" json:"ipv6_max_flows_count,omitempty"`
	VplsMaxFlowsCount *uint64 `protobuf:"varint,12,opt,name=vpls_max_flows_count,json=vplsMaxFlowsCount" json:"vpls_max_flows_count,omitempty"`
	MplsMaxFlowsCount *uint64 `protobuf:"varint,13,opt,name=mpls_max_flows_count,json=mplsMaxFlowsCount" json:"mpls_max_flows_count,omitempty"`
	// Total number of heap memory allocation failure
	MemoryAllocFailCnt *uint32 `protobuf:"varint,14,opt,name=memory_alloc_fail_cnt,json=memoryAllocFailCnt" json:"memory_alloc_fail_cnt,omitempty"`
	// Value of Configured Observation Domain ID
	Ipv4ConfiguredObservationDomainId *uint32 `protobuf:"varint,15,opt,name=ipv4_configured_observation_domain_id,json=ipv4ConfiguredObservationDomainId" json:"ipv4_configured_observation_domain_id,omitempty"`
	Ipv6ConfiguredObservationDomainId *uint32 `protobuf:"varint,16,opt,name=ipv6_configured_observation_domain_id,json=ipv6ConfiguredObservationDomainId" json:"ipv6_configured_observation_domain_id,omitempty"`
	VplsConfiguredObservationDomainId *uint32 `protobuf:"varint,17,opt,name=vpls_configured_observation_domain_id,json=vplsConfiguredObservationDomainId" json:"vpls_configured_observation_domain_id,omitempty"`
	MplsConfiguredObservationDomainId *uint32 `protobuf:"varint,18,opt,name=mpls_configured_observation_domain_id,json=mplsConfiguredObservationDomainId" json:"mpls_configured_observation_domain_id,omitempty"`
	// Timestamp of last clear command
	LastClearTimestamp *uint32 `protobuf:"varint,19,opt,name=last_clear_timestamp,json=lastClearTimestamp" json:"last_clear_timestamp,omitempty"`
	// Status of ipv6_extended_attrib knob
	Ipv6ExtendedAttribute *bool `protobuf:"varint,20,opt,name=ipv6_extended_attribute,json=ipv6ExtendedAttribute" json:"ipv6_extended_attribute,omitempty"`
	// Status of flex_flow_sizing knob
	FlexibleFlowSizing *bool `protobuf:"varint,21,opt,name=flexible_flow_sizing,json=flexibleFlowSizing" json:"flexible_flow_sizing,omitempty"`
	// Status of use_extended_flow_memory knob
	UseExtendedFlowMemory *bool `protobuf:"varint,22,opt,name=use_extended_flow_memory,json=useExtendedFlowMemory" json:"use_extended_flow_memory,omitempty"`
	// NPU level statistics
	NpuStats             []*InlineJflowNpuStats `protobuf:"bytes,50,rep,name=npu_stats,json=npuStats" json:"npu_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *InlineJflow) Reset()         { *m = InlineJflow{} }
func (m *InlineJflow) String() string { return proto.CompactTextString(m) }
func (*InlineJflow) ProtoMessage()    {}
func (*InlineJflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f414b06d7d500f7, []int{0}
}

func (m *InlineJflow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InlineJflow.Unmarshal(m, b)
}
func (m *InlineJflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InlineJflow.Marshal(b, m, deterministic)
}
func (m *InlineJflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InlineJflow.Merge(m, src)
}
func (m *InlineJflow) XXX_Size() int {
	return xxx_messageInfo_InlineJflow.Size(m)
}
func (m *InlineJflow) XXX_DiscardUnknown() {
	xxx_messageInfo_InlineJflow.DiscardUnknown(m)
}

var xxx_messageInfo_InlineJflow proto.InternalMessageInfo

func (m *InlineJflow) GetIpv4FlowsExportFormat() string {
	if m != nil && m.Ipv4FlowsExportFormat != nil {
		return *m.Ipv4FlowsExportFormat
	}
	return ""
}

func (m *InlineJflow) GetIpv6FlowsExportFormat() string {
	if m != nil && m.Ipv6FlowsExportFormat != nil {
		return *m.Ipv6FlowsExportFormat
	}
	return ""
}

func (m *InlineJflow) GetVplsFlowsExportFormat() string {
	if m != nil && m.VplsFlowsExportFormat != nil {
		return *m.VplsFlowsExportFormat
	}
	return ""
}

func (m *InlineJflow) GetMplsFlowsExportFormat() string {
	if m != nil && m.MplsFlowsExportFormat != nil {
		return *m.MplsFlowsExportFormat
	}
	return ""
}

func (m *InlineJflow) GetIpv4RouteRecordCnt() uint32 {
	if m != nil && m.Ipv4RouteRecordCnt != nil {
		return *m.Ipv4RouteRecordCnt
	}
	return 0
}

func (m *InlineJflow) GetIpv6RouteRecordCnt() uint32 {
	if m != nil && m.Ipv6RouteRecordCnt != nil {
		return *m.Ipv6RouteRecordCnt
	}
	return 0
}

func (m *InlineJflow) GetMplsRouteRecordCnt() uint32 {
	if m != nil && m.MplsRouteRecordCnt != nil {
		return *m.MplsRouteRecordCnt
	}
	return 0
}

func (m *InlineJflow) GetAutonomousSystemRecordCnt() uint32 {
	if m != nil && m.AutonomousSystemRecordCnt != nil {
		return *m.AutonomousSystemRecordCnt
	}
	return 0
}

func (m *InlineJflow) GetIpv4MaxFlowsCount() uint64 {
	if m != nil && m.Ipv4MaxFlowsCount != nil {
		return *m.Ipv4MaxFlowsCount
	}
	return 0
}

func (m *InlineJflow) GetIpv6MaxFlowsCount() uint64 {
	if m != nil && m.Ipv6MaxFlowsCount != nil {
		return *m.Ipv6MaxFlowsCount
	}
	return 0
}

func (m *InlineJflow) GetVplsMaxFlowsCount() uint64 {
	if m != nil && m.VplsMaxFlowsCount != nil {
		return *m.VplsMaxFlowsCount
	}
	return 0
}

func (m *InlineJflow) GetMplsMaxFlowsCount() uint64 {
	if m != nil && m.MplsMaxFlowsCount != nil {
		return *m.MplsMaxFlowsCount
	}
	return 0
}

func (m *InlineJflow) GetMemoryAllocFailCnt() uint32 {
	if m != nil && m.MemoryAllocFailCnt != nil {
		return *m.MemoryAllocFailCnt
	}
	return 0
}

func (m *InlineJflow) GetIpv4ConfiguredObservationDomainId() uint32 {
	if m != nil && m.Ipv4ConfiguredObservationDomainId != nil {
		return *m.Ipv4ConfiguredObservationDomainId
	}
	return 0
}

func (m *InlineJflow) GetIpv6ConfiguredObservationDomainId() uint32 {
	if m != nil && m.Ipv6ConfiguredObservationDomainId != nil {
		return *m.Ipv6ConfiguredObservationDomainId
	}
	return 0
}

func (m *InlineJflow) GetVplsConfiguredObservationDomainId() uint32 {
	if m != nil && m.VplsConfiguredObservationDomainId != nil {
		return *m.VplsConfiguredObservationDomainId
	}
	return 0
}

func (m *InlineJflow) GetMplsConfiguredObservationDomainId() uint32 {
	if m != nil && m.MplsConfiguredObservationDomainId != nil {
		return *m.MplsConfiguredObservationDomainId
	}
	return 0
}

func (m *InlineJflow) GetLastClearTimestamp() uint32 {
	if m != nil && m.LastClearTimestamp != nil {
		return *m.LastClearTimestamp
	}
	return 0
}

func (m *InlineJflow) GetIpv6ExtendedAttribute() bool {
	if m != nil && m.Ipv6ExtendedAttribute != nil {
		return *m.Ipv6ExtendedAttribute
	}
	return false
}

func (m *InlineJflow) GetFlexibleFlowSizing() bool {
	if m != nil && m.FlexibleFlowSizing != nil {
		return *m.FlexibleFlowSizing
	}
	return false
}

func (m *InlineJflow) GetUseExtendedFlowMemory() bool {
	if m != nil && m.UseExtendedFlowMemory != nil {
		return *m.UseExtendedFlowMemory
	}
	return false
}

func (m *InlineJflow) GetNpuStats() []*InlineJflowNpuStats {
	if m != nil {
		return m.NpuStats
	}
	return nil
}

type InlineJflowNpuStats struct {
	// All NPUs in the system are globally identified
	// <fpcslot><luinst><pfeinst>
	//   8         4         4    bits
	NpuIdentifier *uint32 `protobuf:"varint,1,req,name=npu_identifier,json=npuIdentifier" json:"npu_identifier,omitempty"`
	// IPv4 NPU Stats
	// Total number of IPv4 packets and bytes sampled
	Ipv4FlowPackets *uint64 `protobuf:"varint,51,opt,name=ipv4_flow_packets,json=ipv4FlowPackets" json:"ipv4_flow_packets,omitempty"`
	Ipv4FlowBytes   *uint64 `protobuf:"varint,52,opt,name=ipv4_flow_bytes,json=ipv4FlowBytes" json:"ipv4_flow_bytes,omitempty"`
	// Total number of IPv4 flows created
	Ipv4TotalFlows *uint64 `protobuf:"varint,53,opt,name=ipv4_total_flows,json=ipv4TotalFlows" json:"ipv4_total_flows,omitempty"`
	// Total number of IPv4 flows that are active currently
	Ipv4ActiveFlows *uint64 `protobuf:"varint,54,opt,name=ipv4_active_flows,json=ipv4ActiveFlows" json:"ipv4_active_flows,omitempty"`
	// Total number of IPv4 flows exported to collector
	Ipv4FlowsExported *uint64 `protobuf:"varint,55,opt,name=ipv4_flows_exported,json=ipv4FlowsExported" json:"ipv4_flows_exported,omitempty"`
	// Total number of IPv4 flow packets exported to collector
	Ipv4PacketsExported *uint64 `protobuf:"varint,56,opt,name=ipv4_packets_exported,json=ipv4PacketsExported" json:"ipv4_packets_exported,omitempty"`
	// Total number of IPv4 flows exported due to idle time out
	Ipv4FlowsInactiveTimedOut *uint64 `protobuf:"varint,57,opt,name=ipv4_flows_inactive_timed_out,json=ipv4FlowsInactiveTimedOut" json:"ipv4_flows_inactive_timed_out,omitempty"`
	// Total number of IPv4 flows exported due to active time out
	Ipv4FlowsActiveTimedOut *uint64 `protobuf:"varint,58,opt,name=ipv4_flows_active_timed_out,json=ipv4FlowsActiveTimedOut" json:"ipv4_flows_active_timed_out,omitempty"`
	// Total number of IPv4 flow creation failure (flow insert faiure)
	Ipv4FlowCreateFailure *uint64 `protobuf:"varint,59,opt,name=ipv4_flow_create_failure,json=ipv4FlowCreateFailure" json:"ipv4_flow_create_failure,omitempty"`
	// Total number of route, autonomous system lookup failure
	Ipv4RouteLookupFailure            *uint64 `protobuf:"varint,60,opt,name=ipv4_route_lookup_failure,json=ipv4RouteLookupFailure" json:"ipv4_route_lookup_failure,omitempty"`
	Ipv4AutonomousSystemLookupFailure *uint64 `protobuf:"varint,61,opt,name=ipv4_autonomous_system_lookup_failure,json=ipv4AutonomousSystemLookupFailure" json:"ipv4_autonomous_system_lookup_failure,omitempty"`
	// Total number of exporting flow record to collector failed
	Ipv4FlowPacketExportFailure *uint64 `protobuf:"varint,62,opt,name=ipv4_flow_packet_export_failure,json=ipv4FlowPacketExportFailure" json:"ipv4_flow_packet_export_failure,omitempty"`
	// IPv4 flow table utlization in percentage
	Ipv4FlowTableUtilization *float32 `protobuf:"fixed32,63,opt,name=ipv4_flow_table_utilization,json=ipv4FlowTableUtilization" json:"ipv4_flow_table_utilization,omitempty"`
	// Absolute number of flow inserted
	Ipv4FlowInsertCount *uint64 `protobuf:"varint,64,opt,name=ipv4_flow_insert_count,json=ipv4FlowInsertCount" json:"ipv4_flow_insert_count,omitempty"`
	// IPv6 NPU Stats
	Ipv6FlowPackets                   *uint64  `protobuf:"varint,101,opt,name=ipv6_flow_packets,json=ipv6FlowPackets" json:"ipv6_flow_packets,omitempty"`
	Ipv6FlowBytes                     *uint64  `protobuf:"varint,102,opt,name=ipv6_flow_bytes,json=ipv6FlowBytes" json:"ipv6_flow_bytes,omitempty"`
	Ipv6TotalFlows                    *uint64  `protobuf:"varint,103,opt,name=ipv6_total_flows,json=ipv6TotalFlows" json:"ipv6_total_flows,omitempty"`
	Ipv6ActiveFlows                   *uint64  `protobuf:"varint,104,opt,name=ipv6_active_flows,json=ipv6ActiveFlows" json:"ipv6_active_flows,omitempty"`
	Ipv6FlowsExported                 *uint64  `protobuf:"varint,105,opt,name=ipv6_flows_exported,json=ipv6FlowsExported" json:"ipv6_flows_exported,omitempty"`
	Ipv6PacketsExported               *uint64  `protobuf:"varint,106,opt,name=ipv6_packets_exported,json=ipv6PacketsExported" json:"ipv6_packets_exported,omitempty"`
	Ipv6FlowsInactiveTimedOut         *uint64  `protobuf:"varint,107,opt,name=ipv6_flows_inactive_timed_out,json=ipv6FlowsInactiveTimedOut" json:"ipv6_flows_inactive_timed_out,omitempty"`
	Ipv6FlowsActiveTimedOut           *uint64  `protobuf:"varint,108,opt,name=ipv6_flows_active_timed_out,json=ipv6FlowsActiveTimedOut" json:"ipv6_flows_active_timed_out,omitempty"`
	Ipv6FlowCreateFailure             *uint64  `protobuf:"varint,109,opt,name=ipv6_flow_create_failure,json=ipv6FlowCreateFailure" json:"ipv6_flow_create_failure,omitempty"`
	Ipv6RouteLookupFailure            *uint64  `protobuf:"varint,110,opt,name=ipv6_route_lookup_failure,json=ipv6RouteLookupFailure" json:"ipv6_route_lookup_failure,omitempty"`
	Ipv6AutonomousSystemLookupFailure *uint64  `protobuf:"varint,111,opt,name=ipv6_autonomous_system_lookup_failure,json=ipv6AutonomousSystemLookupFailure" json:"ipv6_autonomous_system_lookup_failure,omitempty"`
	Ipv6FlowPacketExportFailure       *uint64  `protobuf:"varint,112,opt,name=ipv6_flow_packet_export_failure,json=ipv6FlowPacketExportFailure" json:"ipv6_flow_packet_export_failure,omitempty"`
	Ipv6FlowTableUtilization          *float32 `protobuf:"fixed32,113,opt,name=ipv6_flow_table_utilization,json=ipv6FlowTableUtilization" json:"ipv6_flow_table_utilization,omitempty"`
	Ipv6FlowInsertCount               *uint64  `protobuf:"varint,114,opt,name=ipv6_flow_insert_count,json=ipv6FlowInsertCount" json:"ipv6_flow_insert_count,omitempty"`
	// VPLS NPU Stats
	VplsFlowPackets                   *uint64  `protobuf:"varint,151,opt,name=vpls_flow_packets,json=vplsFlowPackets" json:"vpls_flow_packets,omitempty"`
	VplsFlowBytes                     *uint64  `protobuf:"varint,152,opt,name=vpls_flow_bytes,json=vplsFlowBytes" json:"vpls_flow_bytes,omitempty"`
	VplsTotalFlows                    *uint64  `protobuf:"varint,153,opt,name=vpls_total_flows,json=vplsTotalFlows" json:"vpls_total_flows,omitempty"`
	VplsActiveFlows                   *uint64  `protobuf:"varint,154,opt,name=vpls_active_flows,json=vplsActiveFlows" json:"vpls_active_flows,omitempty"`
	VplsFlowsExported                 *uint64  `protobuf:"varint,155,opt,name=vpls_flows_exported,json=vplsFlowsExported" json:"vpls_flows_exported,omitempty"`
	VplsPacketsExported               *uint64  `protobuf:"varint,156,opt,name=vpls_packets_exported,json=vplsPacketsExported" json:"vpls_packets_exported,omitempty"`
	VplsFlowsInactiveTimedOut         *uint64  `protobuf:"varint,157,opt,name=vpls_flows_inactive_timed_out,json=vplsFlowsInactiveTimedOut" json:"vpls_flows_inactive_timed_out,omitempty"`
	VplsFlowsActiveTimedOut           *uint64  `protobuf:"varint,158,opt,name=vpls_flows_active_timed_out,json=vplsFlowsActiveTimedOut" json:"vpls_flows_active_timed_out,omitempty"`
	VplsFlowCreateFailure             *uint64  `protobuf:"varint,159,opt,name=vpls_flow_create_failure,json=vplsFlowCreateFailure" json:"vpls_flow_create_failure,omitempty"`
	VplsRouteLookupFailure            *uint64  `protobuf:"varint,160,opt,name=vpls_route_lookup_failure,json=vplsRouteLookupFailure" json:"vpls_route_lookup_failure,omitempty"`
	VplsAutonomousSystemLookupFailure *uint64  `protobuf:"varint,161,opt,name=vpls_autonomous_system_lookup_failure,json=vplsAutonomousSystemLookupFailure" json:"vpls_autonomous_system_lookup_failure,omitempty"`
	VplsFlowPacketExportFailure       *uint64  `protobuf:"varint,162,opt,name=vpls_flow_packet_export_failure,json=vplsFlowPacketExportFailure" json:"vpls_flow_packet_export_failure,omitempty"`
	VplsFlowTableUtilization          *float32 `protobuf:"fixed32,163,opt,name=vpls_flow_table_utilization,json=vplsFlowTableUtilization" json:"vpls_flow_table_utilization,omitempty"`
	VplsFlowInsertCount               *uint64  `protobuf:"varint,164,opt,name=vpls_flow_insert_count,json=vplsFlowInsertCount" json:"vpls_flow_insert_count,omitempty"`
	// MPLS NPU Stats
	MplsFlowPackets                   *uint64  `protobuf:"varint,201,opt,name=mpls_flow_packets,json=mplsFlowPackets" json:"mpls_flow_packets,omitempty"`
	MplsFlowBytes                     *uint64  `protobuf:"varint,202,opt,name=mpls_flow_bytes,json=mplsFlowBytes" json:"mpls_flow_bytes,omitempty"`
	MplsTotalFlows                    *uint64  `protobuf:"varint,203,opt,name=mpls_total_flows,json=mplsTotalFlows" json:"mpls_total_flows,omitempty"`
	MplsActiveFlows                   *uint64  `protobuf:"varint,204,opt,name=mpls_active_flows,json=mplsActiveFlows" json:"mpls_active_flows,omitempty"`
	MplsFlowsExported                 *uint64  `protobuf:"varint,205,opt,name=mpls_flows_exported,json=mplsFlowsExported" json:"mpls_flows_exported,omitempty"`
	MplsPacketsExported               *uint64  `protobuf:"varint,206,opt,name=mpls_packets_exported,json=mplsPacketsExported" json:"mpls_packets_exported,omitempty"`
	MplsFlowsInactiveTimedOut         *uint64  `protobuf:"varint,207,opt,name=mpls_flows_inactive_timed_out,json=mplsFlowsInactiveTimedOut" json:"mpls_flows_inactive_timed_out,omitempty"`
	MplsFlowsActiveTimedOut           *uint64  `protobuf:"varint,208,opt,name=mpls_flows_active_timed_out,json=mplsFlowsActiveTimedOut" json:"mpls_flows_active_timed_out,omitempty"`
	MplsFlowCreateFailure             *uint64  `protobuf:"varint,209,opt,name=mpls_flow_create_failure,json=mplsFlowCreateFailure" json:"mpls_flow_create_failure,omitempty"`
	MplsRouteLookupFailure            *uint64  `protobuf:"varint,210,opt,name=mpls_route_lookup_failure,json=mplsRouteLookupFailure" json:"mpls_route_lookup_failure,omitempty"`
	MplsAutonomousSystemLookupFailure *uint64  `protobuf:"varint,211,opt,name=mpls_autonomous_system_lookup_failure,json=mplsAutonomousSystemLookupFailure" json:"mpls_autonomous_system_lookup_failure,omitempty"`
	MplsFlowPacketExportFailure       *uint64  `protobuf:"varint,212,opt,name=mpls_flow_packet_export_failure,json=mplsFlowPacketExportFailure" json:"mpls_flow_packet_export_failure,omitempty"`
	MplsFlowTableUtilization          *float32 `protobuf:"fixed32,213,opt,name=mpls_flow_table_utilization,json=mplsFlowTableUtilization" json:"mpls_flow_table_utilization,omitempty"`
	MplsFlowInsertCount               *uint64  `protobuf:"varint,214,opt,name=mpls_flow_insert_count,json=mplsFlowInsertCount" json:"mpls_flow_insert_count,omitempty"`
	XXX_NoUnkeyedLiteral              struct{} `json:"-"`
	XXX_unrecognized                  []byte   `json:"-"`
	XXX_sizecache                     int32    `json:"-"`
}

func (m *InlineJflowNpuStats) Reset()         { *m = InlineJflowNpuStats{} }
func (m *InlineJflowNpuStats) String() string { return proto.CompactTextString(m) }
func (*InlineJflowNpuStats) ProtoMessage()    {}
func (*InlineJflowNpuStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f414b06d7d500f7, []int{1}
}

func (m *InlineJflowNpuStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InlineJflowNpuStats.Unmarshal(m, b)
}
func (m *InlineJflowNpuStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InlineJflowNpuStats.Marshal(b, m, deterministic)
}
func (m *InlineJflowNpuStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InlineJflowNpuStats.Merge(m, src)
}
func (m *InlineJflowNpuStats) XXX_Size() int {
	return xxx_messageInfo_InlineJflowNpuStats.Size(m)
}
func (m *InlineJflowNpuStats) XXX_DiscardUnknown() {
	xxx_messageInfo_InlineJflowNpuStats.DiscardUnknown(m)
}

var xxx_messageInfo_InlineJflowNpuStats proto.InternalMessageInfo

func (m *InlineJflowNpuStats) GetNpuIdentifier() uint32 {
	if m != nil && m.NpuIdentifier != nil {
		return *m.NpuIdentifier
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowPackets() uint64 {
	if m != nil && m.Ipv4FlowPackets != nil {
		return *m.Ipv4FlowPackets
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowBytes() uint64 {
	if m != nil && m.Ipv4FlowBytes != nil {
		return *m.Ipv4FlowBytes
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4TotalFlows() uint64 {
	if m != nil && m.Ipv4TotalFlows != nil {
		return *m.Ipv4TotalFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4ActiveFlows() uint64 {
	if m != nil && m.Ipv4ActiveFlows != nil {
		return *m.Ipv4ActiveFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowsExported() uint64 {
	if m != nil && m.Ipv4FlowsExported != nil {
		return *m.Ipv4FlowsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4PacketsExported() uint64 {
	if m != nil && m.Ipv4PacketsExported != nil {
		return *m.Ipv4PacketsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowsInactiveTimedOut() uint64 {
	if m != nil && m.Ipv4FlowsInactiveTimedOut != nil {
		return *m.Ipv4FlowsInactiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowsActiveTimedOut() uint64 {
	if m != nil && m.Ipv4FlowsActiveTimedOut != nil {
		return *m.Ipv4FlowsActiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowCreateFailure() uint64 {
	if m != nil && m.Ipv4FlowCreateFailure != nil {
		return *m.Ipv4FlowCreateFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4RouteLookupFailure() uint64 {
	if m != nil && m.Ipv4RouteLookupFailure != nil {
		return *m.Ipv4RouteLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4AutonomousSystemLookupFailure() uint64 {
	if m != nil && m.Ipv4AutonomousSystemLookupFailure != nil {
		return *m.Ipv4AutonomousSystemLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowPacketExportFailure() uint64 {
	if m != nil && m.Ipv4FlowPacketExportFailure != nil {
		return *m.Ipv4FlowPacketExportFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowTableUtilization() float32 {
	if m != nil && m.Ipv4FlowTableUtilization != nil {
		return *m.Ipv4FlowTableUtilization
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowInsertCount() uint64 {
	if m != nil && m.Ipv4FlowInsertCount != nil {
		return *m.Ipv4FlowInsertCount
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowPackets() uint64 {
	if m != nil && m.Ipv6FlowPackets != nil {
		return *m.Ipv6FlowPackets
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowBytes() uint64 {
	if m != nil && m.Ipv6FlowBytes != nil {
		return *m.Ipv6FlowBytes
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6TotalFlows() uint64 {
	if m != nil && m.Ipv6TotalFlows != nil {
		return *m.Ipv6TotalFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6ActiveFlows() uint64 {
	if m != nil && m.Ipv6ActiveFlows != nil {
		return *m.Ipv6ActiveFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowsExported() uint64 {
	if m != nil && m.Ipv6FlowsExported != nil {
		return *m.Ipv6FlowsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6PacketsExported() uint64 {
	if m != nil && m.Ipv6PacketsExported != nil {
		return *m.Ipv6PacketsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowsInactiveTimedOut() uint64 {
	if m != nil && m.Ipv6FlowsInactiveTimedOut != nil {
		return *m.Ipv6FlowsInactiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowsActiveTimedOut() uint64 {
	if m != nil && m.Ipv6FlowsActiveTimedOut != nil {
		return *m.Ipv6FlowsActiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowCreateFailure() uint64 {
	if m != nil && m.Ipv6FlowCreateFailure != nil {
		return *m.Ipv6FlowCreateFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6RouteLookupFailure() uint64 {
	if m != nil && m.Ipv6RouteLookupFailure != nil {
		return *m.Ipv6RouteLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6AutonomousSystemLookupFailure() uint64 {
	if m != nil && m.Ipv6AutonomousSystemLookupFailure != nil {
		return *m.Ipv6AutonomousSystemLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowPacketExportFailure() uint64 {
	if m != nil && m.Ipv6FlowPacketExportFailure != nil {
		return *m.Ipv6FlowPacketExportFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowTableUtilization() float32 {
	if m != nil && m.Ipv6FlowTableUtilization != nil {
		return *m.Ipv6FlowTableUtilization
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowInsertCount() uint64 {
	if m != nil && m.Ipv6FlowInsertCount != nil {
		return *m.Ipv6FlowInsertCount
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowPackets() uint64 {
	if m != nil && m.VplsFlowPackets != nil {
		return *m.VplsFlowPackets
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowBytes() uint64 {
	if m != nil && m.VplsFlowBytes != nil {
		return *m.VplsFlowBytes
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsTotalFlows() uint64 {
	if m != nil && m.VplsTotalFlows != nil {
		return *m.VplsTotalFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsActiveFlows() uint64 {
	if m != nil && m.VplsActiveFlows != nil {
		return *m.VplsActiveFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowsExported() uint64 {
	if m != nil && m.VplsFlowsExported != nil {
		return *m.VplsFlowsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsPacketsExported() uint64 {
	if m != nil && m.VplsPacketsExported != nil {
		return *m.VplsPacketsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowsInactiveTimedOut() uint64 {
	if m != nil && m.VplsFlowsInactiveTimedOut != nil {
		return *m.VplsFlowsInactiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowsActiveTimedOut() uint64 {
	if m != nil && m.VplsFlowsActiveTimedOut != nil {
		return *m.VplsFlowsActiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowCreateFailure() uint64 {
	if m != nil && m.VplsFlowCreateFailure != nil {
		return *m.VplsFlowCreateFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsRouteLookupFailure() uint64 {
	if m != nil && m.VplsRouteLookupFailure != nil {
		return *m.VplsRouteLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsAutonomousSystemLookupFailure() uint64 {
	if m != nil && m.VplsAutonomousSystemLookupFailure != nil {
		return *m.VplsAutonomousSystemLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowPacketExportFailure() uint64 {
	if m != nil && m.VplsFlowPacketExportFailure != nil {
		return *m.VplsFlowPacketExportFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowTableUtilization() float32 {
	if m != nil && m.VplsFlowTableUtilization != nil {
		return *m.VplsFlowTableUtilization
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowInsertCount() uint64 {
	if m != nil && m.VplsFlowInsertCount != nil {
		return *m.VplsFlowInsertCount
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowPackets() uint64 {
	if m != nil && m.MplsFlowPackets != nil {
		return *m.MplsFlowPackets
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowBytes() uint64 {
	if m != nil && m.MplsFlowBytes != nil {
		return *m.MplsFlowBytes
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsTotalFlows() uint64 {
	if m != nil && m.MplsTotalFlows != nil {
		return *m.MplsTotalFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsActiveFlows() uint64 {
	if m != nil && m.MplsActiveFlows != nil {
		return *m.MplsActiveFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowsExported() uint64 {
	if m != nil && m.MplsFlowsExported != nil {
		return *m.MplsFlowsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsPacketsExported() uint64 {
	if m != nil && m.MplsPacketsExported != nil {
		return *m.MplsPacketsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowsInactiveTimedOut() uint64 {
	if m != nil && m.MplsFlowsInactiveTimedOut != nil {
		return *m.MplsFlowsInactiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowsActiveTimedOut() uint64 {
	if m != nil && m.MplsFlowsActiveTimedOut != nil {
		return *m.MplsFlowsActiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowCreateFailure() uint64 {
	if m != nil && m.MplsFlowCreateFailure != nil {
		return *m.MplsFlowCreateFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsRouteLookupFailure() uint64 {
	if m != nil && m.MplsRouteLookupFailure != nil {
		return *m.MplsRouteLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsAutonomousSystemLookupFailure() uint64 {
	if m != nil && m.MplsAutonomousSystemLookupFailure != nil {
		return *m.MplsAutonomousSystemLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowPacketExportFailure() uint64 {
	if m != nil && m.MplsFlowPacketExportFailure != nil {
		return *m.MplsFlowPacketExportFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowTableUtilization() float32 {
	if m != nil && m.MplsFlowTableUtilization != nil {
		return *m.MplsFlowTableUtilization
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowInsertCount() uint64 {
	if m != nil && m.MplsFlowInsertCount != nil {
		return *m.MplsFlowInsertCount
	}
	return 0
}

var E_InlineJflowStatsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*InlineJflow)(nil),
	Field:         9,
	Name:          "inline_jflow_stats_ext",
	Tag:           "bytes,9,opt,name=inline_jflow_stats_ext",
	Filename:      "inline_jflow.proto",
}

func init() {
	proto.RegisterType((*InlineJflow)(nil), "InlineJflow")
	proto.RegisterType((*InlineJflowNpuStats)(nil), "InlineJflowNpuStats")
	proto.RegisterExtension(E_InlineJflowStatsExt)
}

func init() { proto.RegisterFile("inline_jflow.proto", fileDescriptor_2f414b06d7d500f7) }

var fileDescriptor_2f414b06d7d500f7 = []byte{
	// 1401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x98, 0x5b, 0x73, 0xd3, 0x46,
	0x1f, 0xc6, 0xc7, 0x01, 0xde, 0x17, 0x36, 0x38, 0xc1, 0x72, 0x70, 0x94, 0x06, 0x06, 0x97, 0x19,
	0x66, 0x7c, 0xd3, 0x00, 0x29, 0x2c, 0x10, 0x5a, 0xc0, 0x98, 0xa4, 0x0d, 0xe5, 0x34, 0x4e, 0x3a,
	0xed, 0xf4, 0x46, 0xa3, 0x58, 0xeb, 0x74, 0x89, 0x56, 0xab, 0x4a, 0xab, 0xe0, 0x70, 0xd9, 0x2f,
	0x51, 0xe8, 0xf9, 0xf4, 0x65, 0x7a, 0x3e, 0xf7, 0xf3, 0x74, 0x76, 0x75, 0xf0, 0x1e, 0x24, 0x3b,
	0x77, 0x24, 0xcf, 0xff, 0x79, 0xf6, 0xc0, 0xff, 0xb7, 0xab, 0x0d, 0xb0, 0x70, 0xe0, 0xe3, 0x00,
	0x39, 0x4f, 0x87, 0x3e, 0x7d, 0xb6, 0x12, 0x46, 0x94, 0xd1, 0x57, 0x9a, 0x0c, 0xf9, 0x88, 0x20,
	0x16, 0x1d, 0x38, 0x8c, 0x86, 0xe9, 0x2f, 0xcf, 0xbf, 0x04, 0x60, 0x76, 0x53, 0xd4, 0xde, 0xe7,
	0xa5, 0xd6, 0x35, 0x60, 0xe3, 0x70, 0xff, 0x8a, 0xc3, 0x7f, 0x88, 0x1d, 0x34, 0x0a, 0x69, 0xc4,
	0x9c, 0x21, 0x8d, 0x88, 0xcb, 0xec, 0x99, 0x76, 0xad, 0x73, 0xa2, 0x7f, 0x9a, 0xeb, 0x1b, 0x5c,
	0x5e, 0x17, 0xea, 0x86, 0x10, 0x33, 0x23, 0x2c, 0x35, 0x1e, 0x29, 0x8c, 0xb0, 0xd4, 0xb8, 0x1f,
	0xfa, 0x71, 0xa9, 0xf1, 0x68, 0x6a, 0xe4, 0x7a, 0xa9, 0x91, 0x54, 0x19, 0x8f, 0xa5, 0x46, 0x52,
	0x6a, 0xbc, 0x0c, 0xc4, 0x1a, 0x9c, 0x88, 0x26, 0x0c, 0x39, 0x11, 0x1a, 0xd0, 0xc8, 0x73, 0x06,
	0x01, 0xb3, 0xff, 0xd7, 0xae, 0x75, 0xea, 0x7d, 0x8b, 0x8b, 0x7d, 0xae, 0xf5, 0x85, 0xd4, 0x0b,
	0x72, 0x0b, 0x34, 0x2d, 0xff, 0x2f, 0x2c, 0xd0, 0xb4, 0x88, 0xe9, 0x19, 0x96, 0xe3, 0xa9, 0x85,
	0x8b, 0x9a, 0xe5, 0x36, 0x38, 0xe3, 0x26, 0x8c, 0x06, 0x94, 0xd0, 0x24, 0x76, 0xe2, 0x83, 0x98,
	0x21, 0x22, 0x3b, 0x4f, 0x08, 0xe7, 0xd2, 0xb8, 0x66, 0x4b, 0x94, 0x8c, 0x03, 0x2e, 0x82, 0x05,
	0xb1, 0x32, 0xe2, 0x8e, 0xb2, 0x6d, 0x19, 0xd0, 0x24, 0x60, 0x36, 0x68, 0xd7, 0x3a, 0x47, 0xfb,
	0x0d, 0xae, 0x3d, 0x74, 0x47, 0x62, 0x47, 0x7a, 0x5c, 0xc8, 0x0c, 0xd0, 0x30, 0xcc, 0x16, 0x06,
	0x68, 0x18, 0xc4, 0xff, 0x96, 0x6e, 0x38, 0x99, 0x1a, 0xb8, 0x66, 0x18, 0x48, 0x99, 0xa1, 0x9e,
	0x1a, 0x88, 0x61, 0xb8, 0x0e, 0x4e, 0x13, 0x44, 0x68, 0x74, 0xe0, 0xb8, 0xbe, 0x4f, 0x07, 0xce,
	0xd0, 0xc5, 0xbe, 0x58, 0xfd, 0x1c, 0x5f, 0xfd, 0xdd, 0x63, 0x1f, 0xdf, 0x99, 0xb1, 0x6b, 0x7d,
	0x2b, 0xad, 0xe9, 0xf2, 0x92, 0x0d, 0x17, 0xfb, 0x7c, 0xf5, 0x4f, 0xc0, 0x05, 0xb1, 0xfa, 0x01,
	0x0d, 0x86, 0x78, 0x37, 0x89, 0x90, 0xe7, 0xd0, 0x9d, 0x18, 0x45, 0xfb, 0x2e, 0xc3, 0x34, 0x70,
	0x3c, 0x4a, 0x5c, 0x1c, 0x38, 0xd8, 0xb3, 0xe7, 0xc5, 0x3e, 0xbe, 0xca, 0x8b, 0x7b, 0x45, 0xed,
	0xe3, 0x71, 0xe9, 0x3d, 0x51, 0xb9, 0xe9, 0x65, 0x89, 0x70, 0x7a, 0xe2, 0xa9, 0x22, 0x11, 0x4e,
	0x4d, 0x14, 0xfb, 0x37, 0x35, 0xb1, 0x91, 0x26, 0xf2, 0xe2, 0xa9, 0x89, 0xe4, 0x50, 0x89, 0x56,
	0x9a, 0x48, 0xa6, 0x26, 0x5e, 0x02, 0x0b, 0xbe, 0x1b, 0x33, 0x67, 0xe0, 0x23, 0x37, 0x72, 0x18,
	0x26, 0x28, 0x66, 0x2e, 0x09, 0xed, 0x66, 0xda, 0xb8, 0x5c, 0xeb, 0x71, 0x69, 0x3b, 0x57, 0x2c,
	0x08, 0x16, 0xc5, 0x3e, 0xa1, 0x11, 0x43, 0x81, 0x87, 0x3c, 0xc7, 0x65, 0x2c, 0xc2, 0x3b, 0x09,
	0x43, 0xf6, 0x42, 0xbb, 0xd6, 0x39, 0x9e, 0xb2, 0xbf, 0x9e, 0xa9, 0xdd, 0x5c, 0xe4, 0x23, 0x0d,
	0x7d, 0x34, 0xc2, 0x3b, 0x3e, 0x12, 0xcd, 0xe1, 0xc4, 0xf8, 0x39, 0x0e, 0x76, 0xed, 0xd3, 0xc2,
	0x64, 0xe5, 0x1a, 0xef, 0x8e, 0x2d, 0xa1, 0x70, 0xe8, 0x93, 0x18, 0x8d, 0x07, 0x12, 0xae, 0xb4,
	0x17, 0xec, 0x56, 0x3a, 0x54, 0x12, 0xa3, 0x7c, 0x24, 0x6e, 0x7c, 0x28, 0x44, 0xeb, 0x32, 0x38,
	0x11, 0x84, 0x89, 0x13, 0x33, 0x97, 0xc5, 0xf6, 0x6a, 0xfb, 0x48, 0x67, 0x76, 0x75, 0x61, 0x45,
	0x3a, 0xf9, 0x1e, 0x85, 0xc9, 0x16, 0xd7, 0xfa, 0xc7, 0x83, 0xec, 0x5f, 0xe7, 0x5f, 0x9c, 0x01,
	0xcd, 0x92, 0x0a, 0xeb, 0x02, 0x98, 0xe3, 0x51, 0xd8, 0x43, 0x01, 0xc3, 0x43, 0x8c, 0x22, 0xbb,
	0xd6, 0x9e, 0xe9, 0xd4, 0xfb, 0xf5, 0x20, 0x4c, 0x36, 0x8b, 0x5f, 0x5a, 0x97, 0x41, 0xa3, 0x38,
	0x4a, 0x9d, 0xd0, 0x1d, 0xec, 0x21, 0x16, 0xdb, 0xaf, 0xf3, 0xb6, 0xcf, 0x9b, 0x78, 0x3e, 0x3f,
	0x4a, 0x9f, 0xa4, 0xaa, 0xf5, 0x1a, 0x98, 0x1f, 0x5b, 0x76, 0x0e, 0x18, 0x8a, 0xed, 0x2b, 0xb2,
	0xa1, 0x9e, 0x1b, 0xee, 0x72, 0xcd, 0xba, 0x08, 0x4e, 0x89, 0x72, 0x46, 0x99, 0xeb, 0xa7, 0x74,
	0xd9, 0x57, 0xe5, 0xfa, 0x39, 0x2e, 0x6f, 0x73, 0x55, 0x00, 0x56, 0x4c, 0xc9, 0x1d, 0x30, 0xbc,
	0x8f, 0x32, 0x07, 0x34, 0xa6, 0xd4, 0x15, 0x72, 0x6a, 0xb9, 0x0a, 0x9a, 0xc6, 0x85, 0x80, 0x3c,
	0xfb, 0x9a, 0x6c, 0x6a, 0x68, 0x57, 0x02, 0xf2, 0xac, 0x1b, 0xd9, 0x19, 0x9b, 0xad, 0x7b, 0x6c,
	0xbc, 0x2e, 0x1b, 0x45, 0x74, 0xb6, 0xf8, 0xc2, 0xfa, 0x16, 0x38, 0x2b, 0x8d, 0x88, 0x83, 0x6c,
	0xb2, 0xbc, 0x0f, 0x3d, 0x87, 0x26, 0xcc, 0xbe, 0x21, 0x47, 0x2c, 0x15, 0x63, 0x6f, 0x66, 0x95,
	0xbc, 0x2d, 0xbd, 0xc7, 0x09, 0xb3, 0x7a, 0x60, 0x59, 0x0a, 0x32, 0x62, 0xd6, 0xe4, 0x98, 0xc5,
	0x22, 0xa6, 0xab, 0x86, 0xdc, 0x92, 0x2e, 0x44, 0x67, 0x10, 0x21, 0x97, 0x21, 0x71, 0x24, 0x25,
	0x11, 0xb2, 0x6f, 0xca, 0x09, 0xc5, 0xbd, 0xd8, 0x13, 0x45, 0x1b, 0x69, 0x8d, 0x75, 0x07, 0x2c,
	0x49, 0x97, 0x8d, 0x4f, 0xe9, 0x5e, 0x12, 0x16, 0x01, 0x6f, 0xc8, 0x01, 0xad, 0xe2, 0xde, 0x79,
	0x20, 0xaa, 0xf2, 0x84, 0xf7, 0xb2, 0x63, 0xcd, 0xbc, 0x1a, 0xb4, 0xb4, 0x37, 0xe5, 0x34, 0x71,
	0xba, 0x75, 0xb5, 0x9b, 0x42, 0x0d, 0x7e, 0x07, 0x9c, 0xd3, 0x1b, 0xb4, 0xb8, 0x46, 0xb3, 0xc8,
	0x5b, 0x72, 0xe4, 0xb2, 0xda, 0xae, 0xd9, 0x9d, 0x9a, 0x85, 0xdd, 0x93, 0x36, 0xdb, 0x61, 0x2e,
	0x27, 0x3a, 0x61, 0xd8, 0xc7, 0xcf, 0xc5, 0xd9, 0x62, 0xdf, 0x6e, 0xd7, 0x3a, 0x33, 0x22, 0xa8,
	0x5d, 0xeb, 0xdb, 0x79, 0xd0, 0x36, 0xaf, 0x7b, 0x77, 0x5c, 0x66, 0xad, 0x81, 0xd6, 0x38, 0x05,
	0x07, 0x31, 0x8a, 0x58, 0x76, 0x5f, 0xdc, 0x31, 0xfa, 0x86, 0x07, 0x6c, 0x8a, 0x92, 0xf4, 0xe2,
	0x48, 0x9b, 0x1b, 0xaa, 0xbc, 0x21, 0xbd, 0xb9, 0xa1, 0xc9, 0x1b, 0x94, 0x79, 0x1b, 0xea, 0xbc,
	0x41, 0x9d, 0x37, 0xa8, 0xf0, 0xb6, 0xab, 0xf3, 0x06, 0x0d, 0xde, 0xa0, 0xca, 0xdb, 0x87, 0xc6,
	0x94, 0x4c, 0xde, 0xa0, 0xce, 0x1b, 0xd6, 0x79, 0x83, 0x65, 0xbc, 0x41, 0x93, 0xb7, 0xa7, 0xfa,
	0xbe, 0xc1, 0x72, 0xde, 0x60, 0x35, 0x6f, 0x7b, 0x3a, 0x6f, 0x70, 0x12, 0x6f, 0xb0, 0x8a, 0x37,
	0x5f, 0xe7, 0x0d, 0x56, 0xf3, 0x06, 0x4b, 0x79, 0x23, 0x3a, 0x6f, 0xb0, 0x8a, 0x37, 0x58, 0xce,
	0x5b, 0xa0, 0xf3, 0x06, 0x2b, 0x79, 0x83, 0xd3, 0x79, 0xa3, 0x3a, 0x6f, 0xf0, 0x30, 0xbc, 0xc1,
	0x49, 0xbc, 0x85, 0x3a, 0x6f, 0x70, 0x32, 0x6f, 0xb0, 0x8a, 0xb7, 0x8f, 0x74, 0xde, 0xe0, 0x04,
	0xde, 0x60, 0x09, 0x6f, 0x91, 0xd1, 0x37, 0x3a, 0x6f, 0xab, 0xa0, 0x51, 0x7c, 0xb8, 0x17, 0xbc,
	0x7d, 0x52, 0x53, 0xba, 0x3b, 0xff, 0x72, 0xcf, 0x81, 0x5b, 0x01, 0xf3, 0x63, 0x4f, 0x0a, 0xdc,
	0x0b, 0xc5, 0x51, 0xcf, 0x1d, 0x29, 0x71, 0x97, 0xc0, 0x29, 0x51, 0x2f, 0x13, 0xf7, 0x52, 0x31,
	0xcc, 0x71, 0x5d, 0x42, 0x2e, 0x9f, 0x95, 0x82, 0xdc, 0xa7, 0xe6, 0xac, 0x64, 0xe6, 0x20, 0x68,
	0x1a, 0x4f, 0x10, 0xe4, 0xd9, 0x9f, 0x29, 0xae, 0x86, 0xf6, 0x0a, 0x41, 0x9e, 0xb5, 0x06, 0xc4,
	0xd3, 0xc4, 0x84, 0xee, 0x73, 0xc5, 0x29, 0xc2, 0x75, 0xea, 0xde, 0x06, 0x67, 0xa5, 0x31, 0x4b,
	0xa8, 0xfb, 0x42, 0xc9, 0x58, 0x2a, 0x46, 0x37, 0xb0, 0xbb, 0x07, 0x96, 0xa5, 0x24, 0x23, 0xe7,
	0x4b, 0x25, 0x67, 0xb1, 0xc8, 0xd1, 0xb8, 0xbb, 0x2d, 0x3d, 0xc3, 0x74, 0xee, 0xbe, 0x52, 0x22,
	0x8a, 0xe7, 0x98, 0x0a, 0x5e, 0x17, 0x88, 0x39, 0x96, 0x83, 0xf7, 0xb5, 0x92, 0xd0, 0xda, 0xcf,
	0xdf, 0x3e, 0x2a, 0x20, 0xef, 0x67, 0x1f, 0xc7, 0x53, 0xc9, 0xfb, 0x46, 0x89, 0x13, 0x1f, 0xc9,
	0x93, 0xd1, 0x7b, 0x00, 0xce, 0xe9, 0xbd, 0xaa, 0xa3, 0xf7, 0xad, 0x92, 0xb9, 0xac, 0x76, 0xae,
	0xca, 0xde, 0xba, 0xb4, 0xe3, 0x25, 0xec, 0x7d, 0x57, 0x53, 0xe0, 0xcb, 0x93, 0x0c, 0xf8, 0x6e,
	0x82, 0xd6, 0x38, 0x46, 0x81, 0xef, 0x7b, 0xb3, 0x7f, 0x4a, 0xe8, 0x23, 0x06, 0x7d, 0x3f, 0xa8,
	0x7d, 0x4e, 0x4c, 0xfa, 0x88, 0x46, 0xdf, 0x8f, 0x2a, 0x7d, 0x44, 0xa7, 0x8f, 0xe8, 0xf4, 0xfd,
	0xa4, 0xd2, 0x47, 0x0c, 0xfa, 0x88, 0x41, 0xdf, 0xcf, 0xe6, 0xac, 0x34, 0xfa, 0x48, 0x09, 0x7d,
	0xbf, 0xa8, 0xf4, 0x91, 0x32, 0xfa, 0x48, 0x29, 0x7d, 0xbf, 0xaa, 0xbb, 0x47, 0xca, 0xe9, 0x23,
	0x13, 0xe9, 0xfb, 0x4d, 0xa5, 0x8f, 0x4c, 0xa2, 0x8f, 0x4c, 0xa0, 0xef, 0x77, 0x95, 0x3e, 0x52,
	0x4d, 0x1f, 0xa9, 0xa2, 0xef, 0x0f, 0x95, 0x3e, 0x52, 0x45, 0x1f, 0xa9, 0xa4, 0xef, 0x4f, 0x95,
	0x3e, 0x52, 0x49, 0x1f, 0x39, 0x14, 0x7d, 0x7f, 0xa9, 0xf4, 0x91, 0xc3, 0xd0, 0x47, 0xa6, 0xd0,
	0xf7, 0xb7, 0x4a, 0x1f, 0x99, 0x4c, 0x1f, 0x99, 0x40, 0xdf, 0x3f, 0x2a, 0x7d, 0x64, 0x02, 0x7d,
	0xa4, 0x9c, 0xbe, 0x7f, 0xcd, 0xfe, 0xd1, 0xe8, 0x5b, 0xfb, 0x00, 0xb4, 0xe4, 0xbf, 0xb0, 0xa5,
	0xcf, 0x4a, 0xfe, 0x2a, 0xb5, 0x16, 0x57, 0xee, 0x27, 0x01, 0x0e, 0x51, 0xf4, 0x08, 0xb1, 0x67,
	0x34, 0xda, 0x8b, 0xb7, 0x50, 0x10, 0xd3, 0x28, 0x16, 0x7f, 0xbc, 0x99, 0x5d, 0x3d, 0x29, 0xbf,
	0x39, 0xfb, 0x4d, 0x3c, 0xfe, 0x41, 0xbc, 0x2d, 0xd7, 0x47, 0xec, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x6d, 0x43, 0xb1, 0x22, 0xbc, 0x13, 0x00, 0x00,
}
