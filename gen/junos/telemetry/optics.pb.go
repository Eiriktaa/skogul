// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: optics.proto

package telemetry

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type Optics struct {
	OpticsDiag           []*OpticsInfos `protobuf:"bytes,1,rep,name=Optics_diag,json=OpticsDiag" json:"Optics_diag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Optics) Reset()         { *m = Optics{} }
func (m *Optics) String() string { return proto.CompactTextString(m) }
func (*Optics) ProtoMessage()    {}
func (*Optics) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b02cb96ddad460a, []int{0}
}
func (m *Optics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Optics.Unmarshal(m, b)
}
func (m *Optics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Optics.Marshal(b, m, deterministic)
}
func (m *Optics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Optics.Merge(m, src)
}
func (m *Optics) XXX_Size() int {
	return xxx_messageInfo_Optics.Size(m)
}
func (m *Optics) XXX_DiscardUnknown() {
	xxx_messageInfo_Optics.DiscardUnknown(m)
}

var xxx_messageInfo_Optics proto.InternalMessageInfo

func (m *Optics) GetOpticsDiag() []*OpticsInfos {
	if m != nil {
		return m.OpticsDiag
	}
	return nil
}

//
// Optics Interface information
//
type OpticsInfos struct {
	// Interface name, e.g., xe-0/0/0
	IfName *string `protobuf:"bytes,1,req,name=if_name,json=ifName" json:"if_name,omitempty"`
	// Global Index
	SnmpIfIndex *uint32 `protobuf:"varint,2,opt,name=snmp_if_index,json=snmpIfIndex" json:"snmp_if_index,omitempty"`
	// Optics module Diagnostics statistics
	OpticsDiagStats      *OpticsDiagStats `protobuf:"bytes,3,opt,name=optics_diag_stats,json=opticsDiagStats" json:"optics_diag_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *OpticsInfos) Reset()         { *m = OpticsInfos{} }
func (m *OpticsInfos) String() string { return proto.CompactTextString(m) }
func (*OpticsInfos) ProtoMessage()    {}
func (*OpticsInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b02cb96ddad460a, []int{1}
}
func (m *OpticsInfos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsInfos.Unmarshal(m, b)
}
func (m *OpticsInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsInfos.Marshal(b, m, deterministic)
}
func (m *OpticsInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsInfos.Merge(m, src)
}
func (m *OpticsInfos) XXX_Size() int {
	return xxx_messageInfo_OpticsInfos.Size(m)
}
func (m *OpticsInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsInfos.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsInfos proto.InternalMessageInfo

func (m *OpticsInfos) GetIfName() string {
	if m != nil && m.IfName != nil {
		return *m.IfName
	}
	return ""
}

func (m *OpticsInfos) GetSnmpIfIndex() uint32 {
	if m != nil && m.SnmpIfIndex != nil {
		return *m.SnmpIfIndex
	}
	return 0
}

func (m *OpticsInfos) GetOpticsDiagStats() *OpticsDiagStats {
	if m != nil {
		return m.OpticsDiagStats
	}
	return nil
}

//
// Optics Diagnostics stats
//
type OpticsDiagStats struct {
	OpticsType *uint32 `protobuf:"varint,1,opt,name=optics_type,json=opticsType" json:"optics_type,omitempty"`
	// Module temperature
	ModuleTemp *float64 `protobuf:"fixed64,2,opt,name=module_temp,json=moduleTemp" json:"module_temp,omitempty"`
	// Module temperature threshold information
	ModuleTempHighAlarmThreshold   *float64 `protobuf:"fixed64,3,opt,name=module_temp_high_alarm_threshold,json=moduleTempHighAlarmThreshold" json:"module_temp_high_alarm_threshold,omitempty"`
	ModuleTempLowAlarmThreshold    *float64 `protobuf:"fixed64,4,opt,name=module_temp_low_alarm_threshold,json=moduleTempLowAlarmThreshold" json:"module_temp_low_alarm_threshold,omitempty"`
	ModuleTempHighWarningThreshold *float64 `protobuf:"fixed64,5,opt,name=module_temp_high_warning_threshold,json=moduleTempHighWarningThreshold" json:"module_temp_high_warning_threshold,omitempty"`
	ModuleTempLowWarningThreshold  *float64 `protobuf:"fixed64,6,opt,name=module_temp_low_warning_threshold,json=moduleTempLowWarningThreshold" json:"module_temp_low_warning_threshold,omitempty"`
	// laser output power threshold information
	LaserOutputPowerHighAlarmThresholdDbm   *float64 `protobuf:"fixed64,7,opt,name=laser_output_power_high_alarm_threshold_dbm,json=laserOutputPowerHighAlarmThresholdDbm" json:"laser_output_power_high_alarm_threshold_dbm,omitempty"`
	LaserOutputPowerLowAlarmThresholdDbm    *float64 `protobuf:"fixed64,8,opt,name=laser_output_power_low_alarm_threshold_dbm,json=laserOutputPowerLowAlarmThresholdDbm" json:"laser_output_power_low_alarm_threshold_dbm,omitempty"`
	LaserOutputPowerHighWarningThresholdDbm *float64 `protobuf:"fixed64,9,opt,name=laser_output_power_high_warning_threshold_dbm,json=laserOutputPowerHighWarningThresholdDbm" json:"laser_output_power_high_warning_threshold_dbm,omitempty"`
	LaserOutputPowerLowWarningThresholdDbm  *float64 `protobuf:"fixed64,10,opt,name=laser_output_power_low_warning_threshold_dbm,json=laserOutputPowerLowWarningThresholdDbm" json:"laser_output_power_low_warning_threshold_dbm,omitempty"`
	// laser rx power threshold information
	LaserRxPowerHighAlarmThresholdDbm   *float64 `protobuf:"fixed64,11,opt,name=laser_rx_power_high_alarm_threshold_dbm,json=laserRxPowerHighAlarmThresholdDbm" json:"laser_rx_power_high_alarm_threshold_dbm,omitempty"`
	LaserRxPowerLowAlarmThresholdDbm    *float64 `protobuf:"fixed64,12,opt,name=laser_rx_power_low_alarm_threshold_dbm,json=laserRxPowerLowAlarmThresholdDbm" json:"laser_rx_power_low_alarm_threshold_dbm,omitempty"`
	LaserRxPowerHighWarningThresholdDbm *float64 `protobuf:"fixed64,13,opt,name=laser_rx_power_high_warning_threshold_dbm,json=laserRxPowerHighWarningThresholdDbm" json:"laser_rx_power_high_warning_threshold_dbm,omitempty"`
	LaserRxPowerLowWarningThresholdDbm  *float64 `protobuf:"fixed64,14,opt,name=laser_rx_power_low_warning_threshold_dbm,json=laserRxPowerLowWarningThresholdDbm" json:"laser_rx_power_low_warning_threshold_dbm,omitempty"`
	// laser bias current threshold information
	LaserBiasCurrentHighAlarmThreshold   *float64 `protobuf:"fixed64,15,opt,name=laser_bias_current_high_alarm_threshold,json=laserBiasCurrentHighAlarmThreshold" json:"laser_bias_current_high_alarm_threshold,omitempty"`
	LaserBiasCurrentLowAlarmThreshold    *float64 `protobuf:"fixed64,16,opt,name=laser_bias_current_low_alarm_threshold,json=laserBiasCurrentLowAlarmThreshold" json:"laser_bias_current_low_alarm_threshold,omitempty"`
	LaserBiasCurrentHighWarningThreshold *float64 `protobuf:"fixed64,17,opt,name=laser_bias_current_high_warning_threshold,json=laserBiasCurrentHighWarningThreshold" json:"laser_bias_current_high_warning_threshold,omitempty"`
	LaserBiasCurrentLowWarningThreshold  *float64 `protobuf:"fixed64,18,opt,name=laser_bias_current_low_warning_threshold,json=laserBiasCurrentLowWarningThreshold" json:"laser_bias_current_low_warning_threshold,omitempty"`
	// Module temperature alarm information
	ModuleTempHighAlarm   *bool `protobuf:"varint,19,opt,name=module_temp_high_alarm,json=moduleTempHighAlarm" json:"module_temp_high_alarm,omitempty"`
	ModuleTempLowAlarm    *bool `protobuf:"varint,20,opt,name=module_temp_low_alarm,json=moduleTempLowAlarm" json:"module_temp_low_alarm,omitempty"`
	ModuleTempHighWarning *bool `protobuf:"varint,21,opt,name=module_temp_high_warning,json=moduleTempHighWarning" json:"module_temp_high_warning,omitempty"`
	ModuleTempLowWarning  *bool `protobuf:"varint,22,opt,name=module_temp_low_warning,json=moduleTempLowWarning" json:"module_temp_low_warning,omitempty"`
	// Optics module lane Diagnostics statistics
	OpticsLaneDiagStats  []*OpticsDiagLaneStats `protobuf:"bytes,23,rep,name=optics_lane_diag_stats,json=opticsLaneDiagStats" json:"optics_lane_diag_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *OpticsDiagStats) Reset()         { *m = OpticsDiagStats{} }
func (m *OpticsDiagStats) String() string { return proto.CompactTextString(m) }
func (*OpticsDiagStats) ProtoMessage()    {}
func (*OpticsDiagStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b02cb96ddad460a, []int{2}
}
func (m *OpticsDiagStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsDiagStats.Unmarshal(m, b)
}
func (m *OpticsDiagStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsDiagStats.Marshal(b, m, deterministic)
}
func (m *OpticsDiagStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsDiagStats.Merge(m, src)
}
func (m *OpticsDiagStats) XXX_Size() int {
	return xxx_messageInfo_OpticsDiagStats.Size(m)
}
func (m *OpticsDiagStats) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsDiagStats.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsDiagStats proto.InternalMessageInfo

func (m *OpticsDiagStats) GetOpticsType() uint32 {
	if m != nil && m.OpticsType != nil {
		return *m.OpticsType
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTemp() float64 {
	if m != nil && m.ModuleTemp != nil {
		return *m.ModuleTemp
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempHighAlarmThreshold() float64 {
	if m != nil && m.ModuleTempHighAlarmThreshold != nil {
		return *m.ModuleTempHighAlarmThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempLowAlarmThreshold() float64 {
	if m != nil && m.ModuleTempLowAlarmThreshold != nil {
		return *m.ModuleTempLowAlarmThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempHighWarningThreshold() float64 {
	if m != nil && m.ModuleTempHighWarningThreshold != nil {
		return *m.ModuleTempHighWarningThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempLowWarningThreshold() float64 {
	if m != nil && m.ModuleTempLowWarningThreshold != nil {
		return *m.ModuleTempLowWarningThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserOutputPowerHighAlarmThresholdDbm() float64 {
	if m != nil && m.LaserOutputPowerHighAlarmThresholdDbm != nil {
		return *m.LaserOutputPowerHighAlarmThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserOutputPowerLowAlarmThresholdDbm() float64 {
	if m != nil && m.LaserOutputPowerLowAlarmThresholdDbm != nil {
		return *m.LaserOutputPowerLowAlarmThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserOutputPowerHighWarningThresholdDbm() float64 {
	if m != nil && m.LaserOutputPowerHighWarningThresholdDbm != nil {
		return *m.LaserOutputPowerHighWarningThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserOutputPowerLowWarningThresholdDbm() float64 {
	if m != nil && m.LaserOutputPowerLowWarningThresholdDbm != nil {
		return *m.LaserOutputPowerLowWarningThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserRxPowerHighAlarmThresholdDbm() float64 {
	if m != nil && m.LaserRxPowerHighAlarmThresholdDbm != nil {
		return *m.LaserRxPowerHighAlarmThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserRxPowerLowAlarmThresholdDbm() float64 {
	if m != nil && m.LaserRxPowerLowAlarmThresholdDbm != nil {
		return *m.LaserRxPowerLowAlarmThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserRxPowerHighWarningThresholdDbm() float64 {
	if m != nil && m.LaserRxPowerHighWarningThresholdDbm != nil {
		return *m.LaserRxPowerHighWarningThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserRxPowerLowWarningThresholdDbm() float64 {
	if m != nil && m.LaserRxPowerLowWarningThresholdDbm != nil {
		return *m.LaserRxPowerLowWarningThresholdDbm
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserBiasCurrentHighAlarmThreshold() float64 {
	if m != nil && m.LaserBiasCurrentHighAlarmThreshold != nil {
		return *m.LaserBiasCurrentHighAlarmThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserBiasCurrentLowAlarmThreshold() float64 {
	if m != nil && m.LaserBiasCurrentLowAlarmThreshold != nil {
		return *m.LaserBiasCurrentLowAlarmThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserBiasCurrentHighWarningThreshold() float64 {
	if m != nil && m.LaserBiasCurrentHighWarningThreshold != nil {
		return *m.LaserBiasCurrentHighWarningThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetLaserBiasCurrentLowWarningThreshold() float64 {
	if m != nil && m.LaserBiasCurrentLowWarningThreshold != nil {
		return *m.LaserBiasCurrentLowWarningThreshold
	}
	return 0
}

func (m *OpticsDiagStats) GetModuleTempHighAlarm() bool {
	if m != nil && m.ModuleTempHighAlarm != nil {
		return *m.ModuleTempHighAlarm
	}
	return false
}

func (m *OpticsDiagStats) GetModuleTempLowAlarm() bool {
	if m != nil && m.ModuleTempLowAlarm != nil {
		return *m.ModuleTempLowAlarm
	}
	return false
}

func (m *OpticsDiagStats) GetModuleTempHighWarning() bool {
	if m != nil && m.ModuleTempHighWarning != nil {
		return *m.ModuleTempHighWarning
	}
	return false
}

func (m *OpticsDiagStats) GetModuleTempLowWarning() bool {
	if m != nil && m.ModuleTempLowWarning != nil {
		return *m.ModuleTempLowWarning
	}
	return false
}

func (m *OpticsDiagStats) GetOpticsLaneDiagStats() []*OpticsDiagLaneStats {
	if m != nil {
		return m.OpticsLaneDiagStats
	}
	return nil
}

//
// Optics Diagnostics lane stats
//
type OpticsDiagLaneStats struct {
	LaneNumber *uint32 `protobuf:"varint,1,opt,name=lane_number,json=laneNumber" json:"lane_number,omitempty"`
	// lane Module temperature
	LaneLaserTemperature *float64 `protobuf:"fixed64,2,opt,name=lane_laser_temperature,json=laneLaserTemperature" json:"lane_laser_temperature,omitempty"`
	// Laser receive power
	LaneLaserOutputPowerDbm *float32 `protobuf:"fixed32,3,opt,name=lane_laser_output_power_dbm,json=laneLaserOutputPowerDbm" json:"lane_laser_output_power_dbm,omitempty"`
	// Laser transmit power
	LaneLaserReceiverPowerDbm *float32 `protobuf:"fixed32,4,opt,name=lane_laser_receiver_power_dbm,json=laneLaserReceiverPowerDbm" json:"lane_laser_receiver_power_dbm,omitempty"`
	// Laser receive power
	LaneLaserBiasCurrent *float64 `protobuf:"fixed64,5,opt,name=lane_laser_bias_current,json=laneLaserBiasCurrent" json:"lane_laser_bias_current,omitempty"`
	//lane laser output power alarm
	LaneLaserOutputPowerHighAlarm   *bool `protobuf:"varint,6,opt,name=lane_laser_output_power_high_alarm,json=laneLaserOutputPowerHighAlarm" json:"lane_laser_output_power_high_alarm,omitempty"`
	LaneLaserOutputPowerLowAlarm    *bool `protobuf:"varint,7,opt,name=lane_laser_output_power_low_alarm,json=laneLaserOutputPowerLowAlarm" json:"lane_laser_output_power_low_alarm,omitempty"`
	LaneLaserOutputPowerHighWarning *bool `protobuf:"varint,8,opt,name=lane_laser_output_power_high_warning,json=laneLaserOutputPowerHighWarning" json:"lane_laser_output_power_high_warning,omitempty"`
	LaneLaserOutputPowerLowWarning  *bool `protobuf:"varint,9,opt,name=lane_laser_output_power_low_warning,json=laneLaserOutputPowerLowWarning" json:"lane_laser_output_power_low_warning,omitempty"`
	//lane laser receiver power alarm
	LaneLaserReceiverPowerHighAlarm   *bool `protobuf:"varint,10,opt,name=lane_laser_receiver_power_high_alarm,json=laneLaserReceiverPowerHighAlarm" json:"lane_laser_receiver_power_high_alarm,omitempty"`
	LaneLaserReceiverPowerLowAlarm    *bool `protobuf:"varint,11,opt,name=lane_laser_receiver_power_low_alarm,json=laneLaserReceiverPowerLowAlarm" json:"lane_laser_receiver_power_low_alarm,omitempty"`
	LaneLaserReceiverPowerHighWarning *bool `protobuf:"varint,12,opt,name=lane_laser_receiver_power_high_warning,json=laneLaserReceiverPowerHighWarning" json:"lane_laser_receiver_power_high_warning,omitempty"`
	LaneLaserReceiverPowerLowWarning  *bool `protobuf:"varint,13,opt,name=lane_laser_receiver_power_low_warning,json=laneLaserReceiverPowerLowWarning" json:"lane_laser_receiver_power_low_warning,omitempty"`
	//lane laser output power alarm
	LaneLaserBiasCurrentHighAlarm   *bool    `protobuf:"varint,14,opt,name=lane_laser_bias_current_high_alarm,json=laneLaserBiasCurrentHighAlarm" json:"lane_laser_bias_current_high_alarm,omitempty"`
	LaneLaserBiasCurrentLowAlarm    *bool    `protobuf:"varint,15,opt,name=lane_laser_bias_current_low_alarm,json=laneLaserBiasCurrentLowAlarm" json:"lane_laser_bias_current_low_alarm,omitempty"`
	LaneLaserBiasCurrentHighWarning *bool    `protobuf:"varint,16,opt,name=lane_laser_bias_current_high_warning,json=laneLaserBiasCurrentHighWarning" json:"lane_laser_bias_current_high_warning,omitempty"`
	LaneLaserBiasCurrentLowWarning  *bool    `protobuf:"varint,17,opt,name=lane_laser_bias_current_low_warning,json=laneLaserBiasCurrentLowWarning" json:"lane_laser_bias_current_low_warning,omitempty"`
	LaneTxLossOfSignalAlarm         *bool    `protobuf:"varint,18,opt,name=lane_tx_loss_of_signal_alarm,json=laneTxLossOfSignalAlarm" json:"lane_tx_loss_of_signal_alarm,omitempty"`
	LaneRxLossOfSignalAlarm         *bool    `protobuf:"varint,19,opt,name=lane_rx_loss_of_signal_alarm,json=laneRxLossOfSignalAlarm" json:"lane_rx_loss_of_signal_alarm,omitempty"`
	LaneTxLaserDisabledAlarm        *bool    `protobuf:"varint,20,opt,name=lane_tx_laser_disabled_alarm,json=laneTxLaserDisabledAlarm" json:"lane_tx_laser_disabled_alarm,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *OpticsDiagLaneStats) Reset()         { *m = OpticsDiagLaneStats{} }
func (m *OpticsDiagLaneStats) String() string { return proto.CompactTextString(m) }
func (*OpticsDiagLaneStats) ProtoMessage()    {}
func (*OpticsDiagLaneStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b02cb96ddad460a, []int{3}
}
func (m *OpticsDiagLaneStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpticsDiagLaneStats.Unmarshal(m, b)
}
func (m *OpticsDiagLaneStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpticsDiagLaneStats.Marshal(b, m, deterministic)
}
func (m *OpticsDiagLaneStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpticsDiagLaneStats.Merge(m, src)
}
func (m *OpticsDiagLaneStats) XXX_Size() int {
	return xxx_messageInfo_OpticsDiagLaneStats.Size(m)
}
func (m *OpticsDiagLaneStats) XXX_DiscardUnknown() {
	xxx_messageInfo_OpticsDiagLaneStats.DiscardUnknown(m)
}

var xxx_messageInfo_OpticsDiagLaneStats proto.InternalMessageInfo

func (m *OpticsDiagLaneStats) GetLaneNumber() uint32 {
	if m != nil && m.LaneNumber != nil {
		return *m.LaneNumber
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserTemperature() float64 {
	if m != nil && m.LaneLaserTemperature != nil {
		return *m.LaneLaserTemperature
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerDbm() float32 {
	if m != nil && m.LaneLaserOutputPowerDbm != nil {
		return *m.LaneLaserOutputPowerDbm
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerDbm() float32 {
	if m != nil && m.LaneLaserReceiverPowerDbm != nil {
		return *m.LaneLaserReceiverPowerDbm
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrent() float64 {
	if m != nil && m.LaneLaserBiasCurrent != nil {
		return *m.LaneLaserBiasCurrent
	}
	return 0
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerHighAlarm() bool {
	if m != nil && m.LaneLaserOutputPowerHighAlarm != nil {
		return *m.LaneLaserOutputPowerHighAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerLowAlarm() bool {
	if m != nil && m.LaneLaserOutputPowerLowAlarm != nil {
		return *m.LaneLaserOutputPowerLowAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerHighWarning() bool {
	if m != nil && m.LaneLaserOutputPowerHighWarning != nil {
		return *m.LaneLaserOutputPowerHighWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserOutputPowerLowWarning() bool {
	if m != nil && m.LaneLaserOutputPowerLowWarning != nil {
		return *m.LaneLaserOutputPowerLowWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerHighAlarm() bool {
	if m != nil && m.LaneLaserReceiverPowerHighAlarm != nil {
		return *m.LaneLaserReceiverPowerHighAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerLowAlarm() bool {
	if m != nil && m.LaneLaserReceiverPowerLowAlarm != nil {
		return *m.LaneLaserReceiverPowerLowAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerHighWarning() bool {
	if m != nil && m.LaneLaserReceiverPowerHighWarning != nil {
		return *m.LaneLaserReceiverPowerHighWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserReceiverPowerLowWarning() bool {
	if m != nil && m.LaneLaserReceiverPowerLowWarning != nil {
		return *m.LaneLaserReceiverPowerLowWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrentHighAlarm() bool {
	if m != nil && m.LaneLaserBiasCurrentHighAlarm != nil {
		return *m.LaneLaserBiasCurrentHighAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrentLowAlarm() bool {
	if m != nil && m.LaneLaserBiasCurrentLowAlarm != nil {
		return *m.LaneLaserBiasCurrentLowAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrentHighWarning() bool {
	if m != nil && m.LaneLaserBiasCurrentHighWarning != nil {
		return *m.LaneLaserBiasCurrentHighWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneLaserBiasCurrentLowWarning() bool {
	if m != nil && m.LaneLaserBiasCurrentLowWarning != nil {
		return *m.LaneLaserBiasCurrentLowWarning
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneTxLossOfSignalAlarm() bool {
	if m != nil && m.LaneTxLossOfSignalAlarm != nil {
		return *m.LaneTxLossOfSignalAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneRxLossOfSignalAlarm() bool {
	if m != nil && m.LaneRxLossOfSignalAlarm != nil {
		return *m.LaneRxLossOfSignalAlarm
	}
	return false
}

func (m *OpticsDiagLaneStats) GetLaneTxLaserDisabledAlarm() bool {
	if m != nil && m.LaneTxLaserDisabledAlarm != nil {
		return *m.LaneTxLaserDisabledAlarm
	}
	return false
}

var E_JnprOpticsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*Optics)(nil),
	Field:         10,
	Name:          "jnpr_optics_ext",
	Tag:           "bytes,10,opt,name=jnpr_optics_ext",
	Filename:      "optics.proto",
}

func init() {
	proto.RegisterType((*Optics)(nil), "Optics")
	proto.RegisterType((*OpticsInfos)(nil), "OpticsInfos")
	proto.RegisterType((*OpticsDiagStats)(nil), "OpticsDiagStats")
	proto.RegisterType((*OpticsDiagLaneStats)(nil), "OpticsDiagLaneStats")
	proto.RegisterExtension(E_JnprOpticsExt)
}

func init() { proto.RegisterFile("optics.proto", fileDescriptor_1b02cb96ddad460a) }

var fileDescriptor_1b02cb96ddad460a = []byte{
	// 1061 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x95, 0x6d, 0x6f, 0xdb, 0x36,
	0x10, 0xc7, 0xe1, 0xb4, 0xcd, 0xc3, 0x29, 0x4e, 0x5a, 0x3a, 0x89, 0xb5, 0xb5, 0x49, 0x14, 0xb7,
	0xcd, 0xbc, 0x87, 0x06, 0x58, 0x86, 0xa2, 0xc0, 0x9e, 0xb0, 0xb5, 0x19, 0x5a, 0xaf, 0x69, 0xbc,
	0x2a, 0x06, 0xb2, 0x67, 0x42, 0x8e, 0x69, 0x5b, 0x9b, 0x9e, 0x40, 0xd2, 0xb3, 0xf3, 0x76, 0x5f,
	0x60, 0x9f, 0x60, 0x1f, 0x62, 0xdf, 0x70, 0x20, 0x65, 0x59, 0x94, 0x48, 0xb9, 0xef, 0x6c, 0xea,
	0xee, 0x77, 0xff, 0xbb, 0x23, 0xef, 0x60, 0x33, 0x4e, 0xb8, 0x7f, 0xcd, 0x4e, 0x12, 0x1a, 0xf3,
	0xf8, 0xfd, 0x06, 0x27, 0x01, 0x09, 0x09, 0xa7, 0x37, 0x98, 0xc7, 0x49, 0x7a, 0xd8, 0x7a, 0x06,
	0xab, 0x5d, 0x69, 0x84, 0x9e, 0x80, 0x95, 0xfe, 0xc2, 0x03, 0xdf, 0x1b, 0xd9, 0x35, 0xe7, 0x56,
	0xdb, 0x3a, 0xdd, 0x3c, 0x49, 0xcf, 0x3a, 0xd1, 0x30, 0x66, 0x2e, 0xa4, 0x7f, 0xce, 0x7c, 0x6f,
	0xd4, 0xfa, 0xa7, 0x96, 0xd9, 0xcb, 0x6f, 0xe8, 0x00, 0xd6, 0xfc, 0x21, 0x8e, 0xbc, 0x90, 0xd8,
	0x35, 0x67, 0xa5, 0xbd, 0xf1, 0xfc, 0xce, 0xdf, 0xdf, 0xac, 0xac, 0xd7, 0xdc, 0x55, 0x7f, 0x78,
	0xe1, 0x85, 0x04, 0xb5, 0xa0, 0xce, 0xa2, 0x30, 0xc1, 0xfe, 0x10, 0xfb, 0xd1, 0x80, 0xcc, 0xec,
	0x15, 0xa7, 0xd6, 0xae, 0xbb, 0x96, 0x38, 0xec, 0x0c, 0x3b, 0xe2, 0x08, 0x7d, 0x09, 0xf7, 0xe2,
	0x5c, 0x02, 0x66, 0xdc, 0xe3, 0xcc, 0xbe, 0xe5, 0xd4, 0xda, 0xd6, 0xe9, 0xdd, 0x93, 0x3c, 0xf6,
	0xa5, 0x38, 0x77, 0xb7, 0xe3, 0xe2, 0x41, 0xeb, 0xbf, 0x2d, 0xd8, 0x2e, 0x19, 0xa1, 0x43, 0xb0,
	0xe6, 0x44, 0x7e, 0x93, 0x08, 0x65, 0x22, 0x26, 0xa4, 0x47, 0xbd, 0x9b, 0x84, 0xa0, 0x63, 0xb0,
	0xc2, 0x78, 0x30, 0x09, 0x08, 0xe6, 0x24, 0x4c, 0xa4, 0xa8, 0x9a, 0x94, 0xee, 0xd4, 0x5c, 0x48,
	0xbf, 0xf4, 0x48, 0x98, 0xa0, 0x37, 0xe0, 0x28, 0x76, 0x78, 0xec, 0x8f, 0xc6, 0xd8, 0x0b, 0x3c,
	0x1a, 0x62, 0x3e, 0xa6, 0x84, 0x8d, 0xe3, 0x60, 0x20, 0x95, 0x2e, 0x9c, 0x1f, 0xe4, 0xce, 0xaf,
	0xfc, 0xd1, 0xf8, 0x5b, 0x61, 0xdb, 0xcb, 0x4c, 0xd1, 0x6b, 0x38, 0x54, 0x71, 0x41, 0x3c, 0xd5,
	0x68, 0xb7, 0x55, 0xda, 0xfd, 0x9c, 0x76, 0x1e, 0x4f, 0x4b, 0xb0, 0xb7, 0xd0, 0xd2, 0xb4, 0x4d,
	0x3d, 0x1a, 0xf9, 0xd1, 0x48, 0xe1, 0xdd, 0x51, 0x79, 0x07, 0x45, 0x75, 0x57, 0xa9, 0x75, 0x8e,
	0xec, 0xc2, 0x51, 0x59, 0x9f, 0x4e, 0x5c, 0x55, 0x89, 0xfb, 0x05, 0x85, 0x1a, 0xd0, 0x83, 0x8f,
	0x03, 0x8f, 0x11, 0x8a, 0xe3, 0x09, 0x4f, 0x26, 0x1c, 0x27, 0xf1, 0x94, 0x50, 0x63, 0x19, 0xf1,
	0xa0, 0x1f, 0xda, 0x6b, 0x2a, 0xfa, 0xb1, 0xf4, 0xec, 0x4a, 0xc7, 0x1f, 0x84, 0x9f, 0x5e, 0xd0,
	0xb3, 0x7e, 0x88, 0x30, 0x7c, 0x64, 0x08, 0x61, 0x28, 0xad, 0x8c, 0xb0, 0xae, 0x46, 0x78, 0x54,
	0x8e, 0xa0, 0x15, 0x59, 0x04, 0x20, 0xf0, 0xa4, 0x2a, 0x07, 0xad, 0x38, 0x32, 0xc6, 0x86, 0x1a,
	0xe3, 0x03, 0x53, 0x16, 0xe5, 0x3a, 0x89, 0x30, 0xd7, 0xf0, 0x49, 0x45, 0x1e, 0xe6, 0x28, 0xa0,
	0x46, 0x39, 0x36, 0x64, 0x62, 0x0a, 0xf2, 0x13, 0xa4, 0x7a, 0x30, 0x9d, 0xbd, 0xab, 0x17, 0x96,
	0xca, 0x3f, 0x92, 0x5e, 0xee, 0x6c, 0x49, 0x1f, 0xae, 0xe0, 0xb8, 0x84, 0xae, 0xea, 0xc1, 0xa6,
	0x4a, 0x76, 0x54, 0xb2, 0xb1, 0xfe, 0xbf, 0xc1, 0x87, 0x26, 0xcd, 0xe6, 0xaa, 0xd4, 0x55, 0xf6,
	0xc3, 0xb2, 0x6a, 0x53, 0x49, 0x7e, 0x81, 0xb6, 0x41, 0xb7, 0x99, 0xbe, 0xa5, 0xd2, 0x5b, 0x25,
	0xe5, 0x26, 0xf8, 0xcf, 0x59, 0xbd, 0xfb, 0xbe, 0xc7, 0xf0, 0xf5, 0x84, 0x52, 0x12, 0x71, 0xf3,
	0x18, 0xd9, 0xd6, 0xd9, 0xcf, 0x7d, 0x8f, 0xbd, 0x48, 0x7d, 0x0c, 0xc3, 0xe4, 0xc7, 0xac, 0xe0,
	0x05, 0xb6, 0x69, 0xa6, 0xdc, 0xd5, 0x5b, 0xa9, 0xa0, 0xf5, 0xc9, 0xf2, 0x7b, 0x56, 0x71, 0x5d,
	0xb5, 0x3e, 0x0e, 0xee, 0xe9, 0x2f, 0xaa, 0xa4, 0x5b, 0x9b, 0x0a, 0xbf, 0x66, 0x25, 0xd7, 0x94,
	0xeb, 0x78, 0xa4, 0x37, 0xb4, 0xa8, 0x5d, 0xa3, 0x7f, 0x06, 0x7b, 0xe6, 0x99, 0x6d, 0x37, 0x9c,
	0x5a, 0x7b, 0xdd, 0x6d, 0x18, 0x46, 0x34, 0xfa, 0x14, 0x76, 0x8d, 0x93, 0xd9, 0xde, 0x91, 0x3e,
	0x48, 0x1f, 0xc4, 0xe8, 0x19, 0xd8, 0x55, 0xf3, 0xd7, 0xde, 0x95, 0x5e, 0xbb, 0xc6, 0x71, 0x8b,
	0x9e, 0x42, 0xb3, 0x62, 0xca, 0xda, 0x7b, 0xd2, 0x6f, 0xc7, 0x34, 0x54, 0x51, 0x07, 0xf6, 0xe6,
	0x4b, 0x2d, 0xf0, 0x22, 0xa2, 0xee, 0xca, 0xa6, 0x5c, 0xda, 0x3b, 0xca, 0xae, 0x3c, 0xf7, 0x22,
	0x92, 0xee, 0xcb, 0x46, 0xea, 0x23, 0x0e, 0xf2, 0x9d, 0xf9, 0xaf, 0x05, 0x0d, 0x83, 0xb1, 0x58,
	0x8b, 0x92, 0x1d, 0x4d, 0xc2, 0x3e, 0xa1, 0xe9, 0xde, 0xcc, 0x36, 0x3a, 0x88, 0x2f, 0x17, 0xf2,
	0x03, 0xfa, 0x02, 0xf6, 0xa4, 0x5d, 0xda, 0x45, 0x91, 0x05, 0xa1, 0x1e, 0x9f, 0x50, 0x52, 0xdc,
	0xa4, 0x3b, 0xc2, 0xe8, 0x5c, 0xd8, 0xf4, 0x72, 0x13, 0xf4, 0x02, 0xee, 0x2b, 0xce, 0x85, 0x69,
	0x27, 0xde, 0x98, 0x58, 0xa7, 0x2b, 0x19, 0xa1, 0xb9, 0x20, 0x28, 0xb3, 0x4d, 0x3c, 0xac, 0x97,
	0xb0, 0xaf, 0x40, 0x28, 0xb9, 0x26, 0xfe, 0x5f, 0x84, 0x2a, 0x98, 0xdb, 0x2a, 0xe6, 0xbd, 0x05,
	0xc6, 0x9d, 0x5b, 0x2e, 0x40, 0x4f, 0xa1, 0xa9, 0x80, 0xd4, 0x0b, 0x99, 0xae, 0x4e, 0x25, 0x09,
	0xe5, 0xde, 0xa1, 0x0e, 0xb4, 0xaa, 0x92, 0x50, 0x2e, 0xdc, 0xaa, 0x6c, 0xe7, 0xbe, 0x29, 0x89,
	0xfc, 0xea, 0xbd, 0x84, 0xa3, 0x2a, 0x54, 0x7e, 0x0d, 0xd7, 0x24, 0xe9, 0x81, 0x89, 0xb4, 0xb8,
	0x90, 0x6f, 0xe0, 0xd1, 0x52, 0x4d, 0xd9, 0x25, 0x5b, 0x97, 0xac, 0xc3, 0x2a, 0x55, 0xd9, 0x7d,
	0x7b, 0x0d, 0x0f, 0x97, 0xe9, 0xca, 0x68, 0x1b, 0x92, 0x76, 0x50, 0xa1, 0x2c, 0x83, 0x15, 0xb5,
	0x95, 0xfa, 0xa5, 0x54, 0x0c, 0x4a, 0xda, 0x0a, 0xfd, 0xca, 0x6b, 0x56, 0xd4, 0x56, 0xc2, 0xe5,
	0x55, 0xb3, 0x4a, 0xda, 0x0a, 0xb4, 0x45, 0xdd, 0xde, 0x8a, 0x41, 0xba, 0x54, 0x5b, 0x96, 0xeb,
	0xa6, 0xe4, 0x1d, 0x55, 0xab, 0xcb, 0xd2, 0xed, 0xc2, 0xe3, 0xe5, 0xfa, 0x32, 0x62, 0x5d, 0x12,
	0x9d, 0x4a, 0x85, 0xf9, 0xe3, 0x6f, 0x55, 0x5c, 0x53, 0xb5, 0x7a, 0x5b, 0xa5, 0xfb, 0x66, 0x5a,
	0x20, 0xa5, 0xfb, 0x66, 0x5e, 0x1e, 0x72, 0x1b, 0xa9, 0xf7, 0xcd, 0xb0, 0x2f, 0x4a, 0x3d, 0xad,
	0xdc, 0x15, 0x72, 0xfd, 0xa8, 0x3d, 0x35, 0xaf, 0x87, 0x52, 0x4f, 0xab, 0x56, 0x83, 0xdc, 0x37,
	0x6a, 0x4f, 0x8d, 0xdb, 0x00, 0x7d, 0x05, 0x52, 0x3b, 0xe6, 0x33, 0x1c, 0xc4, 0x8c, 0xe1, 0x78,
	0x88, 0x99, 0x3f, 0x8a, 0xbc, 0x60, 0x9e, 0x1f, 0x92, 0x14, 0xf9, 0xf4, 0x7b, 0xb3, 0xf3, 0x98,
	0xb1, 0xee, 0xf0, 0x52, 0x7e, 0x4f, 0x53, 0xcb, 0xdc, 0x69, 0x85, 0x7b, 0x23, 0x77, 0x77, 0x0d,
	0xee, 0x5f, 0x2b, 0xd1, 0x65, 0x36, 0x03, 0x9f, 0x79, 0xfd, 0x80, 0x0c, 0x0a, 0x4b, 0xc5, 0x9e,
	0x47, 0x17, 0x16, 0x67, 0x73, 0x03, 0xe9, 0xff, 0xf9, 0x2b, 0xd8, 0xfe, 0x23, 0x4a, 0x28, 0x9e,
	0xcf, 0x7b, 0x32, 0xe3, 0xa8, 0x79, 0xf2, 0xfd, 0x24, 0xf2, 0x13, 0x42, 0x2f, 0x08, 0x9f, 0xc6,
	0xf4, 0x4f, 0x76, 0x49, 0x22, 0x16, 0x53, 0x26, 0x5f, 0x8c, 0x75, 0xba, 0x36, 0x1f, 0xfe, 0x6e,
	0x5d, 0x38, 0xa6, 0xbf, 0xbf, 0x9b, 0xf1, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x05, 0x8e,
	0x41, 0x0c, 0x0e, 0x00, 0x00,
}
