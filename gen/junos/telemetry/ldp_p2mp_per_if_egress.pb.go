// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ldp_p2mp_per_if_egress.proto

package telemetry

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type LdpP2MpPerIfEgress struct {
	// List of LDP P2mp stats per IF egress records
	PerIfRecords         []*LdpP2MpInterfaceRecord `protobuf:"bytes,1,rep,name=per_if_records,json=perIfRecords" json:"per_if_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *LdpP2MpPerIfEgress) Reset()         { *m = LdpP2MpPerIfEgress{} }
func (m *LdpP2MpPerIfEgress) String() string { return proto.CompactTextString(m) }
func (*LdpP2MpPerIfEgress) ProtoMessage()    {}
func (*LdpP2MpPerIfEgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_90ec76097a3bb737, []int{0}
}
func (m *LdpP2MpPerIfEgress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LdpP2MpPerIfEgress.Unmarshal(m, b)
}
func (m *LdpP2MpPerIfEgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LdpP2MpPerIfEgress.Marshal(b, m, deterministic)
}
func (m *LdpP2MpPerIfEgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LdpP2MpPerIfEgress.Merge(m, src)
}
func (m *LdpP2MpPerIfEgress) XXX_Size() int {
	return xxx_messageInfo_LdpP2MpPerIfEgress.Size(m)
}
func (m *LdpP2MpPerIfEgress) XXX_DiscardUnknown() {
	xxx_messageInfo_LdpP2MpPerIfEgress.DiscardUnknown(m)
}

var xxx_messageInfo_LdpP2MpPerIfEgress proto.InternalMessageInfo

func (m *LdpP2MpPerIfEgress) GetPerIfRecords() []*LdpP2MpInterfaceRecord {
	if m != nil {
		return m.PerIfRecords
	}
	return nil
}

//
// SR statistics record
//
type LdpP2MpInterfaceRecord struct {
	// Interface name, e.g., xe-0/0/0
	IfName *string `protobuf:"bytes,1,req,name=if_name,json=ifName" json:"if_name,omitempty"`
	// Name of the counter. This is useful when an interface has multiple counters.
	// for some scenarios, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,2,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Traffic statistics
	IngressStats         *LabelDistributionProtocolP2MpIfStats `protobuf:"bytes,3,opt,name=ingress_stats,json=ingressStats" json:"ingress_stats,omitempty"`
	EgressStats          *LabelDistributionProtocolP2MpIfStats `protobuf:"bytes,4,opt,name=egress_stats,json=egressStats" json:"egress_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *LdpP2MpInterfaceRecord) Reset()         { *m = LdpP2MpInterfaceRecord{} }
func (m *LdpP2MpInterfaceRecord) String() string { return proto.CompactTextString(m) }
func (*LdpP2MpInterfaceRecord) ProtoMessage()    {}
func (*LdpP2MpInterfaceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_90ec76097a3bb737, []int{1}
}
func (m *LdpP2MpInterfaceRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LdpP2MpInterfaceRecord.Unmarshal(m, b)
}
func (m *LdpP2MpInterfaceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LdpP2MpInterfaceRecord.Marshal(b, m, deterministic)
}
func (m *LdpP2MpInterfaceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LdpP2MpInterfaceRecord.Merge(m, src)
}
func (m *LdpP2MpInterfaceRecord) XXX_Size() int {
	return xxx_messageInfo_LdpP2MpInterfaceRecord.Size(m)
}
func (m *LdpP2MpInterfaceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LdpP2MpInterfaceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LdpP2MpInterfaceRecord proto.InternalMessageInfo

func (m *LdpP2MpInterfaceRecord) GetIfName() string {
	if m != nil && m.IfName != nil {
		return *m.IfName
	}
	return ""
}

func (m *LdpP2MpInterfaceRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *LdpP2MpInterfaceRecord) GetIngressStats() *LabelDistributionProtocolP2MpIfStats {
	if m != nil {
		return m.IngressStats
	}
	return nil
}

func (m *LdpP2MpInterfaceRecord) GetEgressStats() *LabelDistributionProtocolP2MpIfStats {
	if m != nil {
		return m.EgressStats
	}
	return nil
}

type LabelDistributionProtocolP2MpIfStats struct {
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters.
	PacketRate           *uint64  `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate             *uint64  `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelDistributionProtocolP2MpIfStats) Reset()         { *m = LabelDistributionProtocolP2MpIfStats{} }
func (m *LabelDistributionProtocolP2MpIfStats) String() string { return proto.CompactTextString(m) }
func (*LabelDistributionProtocolP2MpIfStats) ProtoMessage()    {}
func (*LabelDistributionProtocolP2MpIfStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_90ec76097a3bb737, []int{2}
}
func (m *LabelDistributionProtocolP2MpIfStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelDistributionProtocolP2MpIfStats.Unmarshal(m, b)
}
func (m *LabelDistributionProtocolP2MpIfStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelDistributionProtocolP2MpIfStats.Marshal(b, m, deterministic)
}
func (m *LabelDistributionProtocolP2MpIfStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelDistributionProtocolP2MpIfStats.Merge(m, src)
}
func (m *LabelDistributionProtocolP2MpIfStats) XXX_Size() int {
	return xxx_messageInfo_LabelDistributionProtocolP2MpIfStats.Size(m)
}
func (m *LabelDistributionProtocolP2MpIfStats) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelDistributionProtocolP2MpIfStats.DiscardUnknown(m)
}

var xxx_messageInfo_LabelDistributionProtocolP2MpIfStats proto.InternalMessageInfo

func (m *LabelDistributionProtocolP2MpIfStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpIfStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpIfStats) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpIfStats) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprLdpP2MpPerIfEgressExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*LdpP2MpPerIfEgress)(nil),
	Field:         156,
	Name:          "jnpr_ldp_p2mp_per_if_egress_ext",
	Tag:           "bytes,156,opt,name=jnpr_ldp_p2mp_per_if_egress_ext",
	Filename:      "ldp_p2mp_per_if_egress.proto",
}

func init() {
	proto.RegisterType((*LdpP2MpPerIfEgress)(nil), "LdpP2mpPerIfEgress")
	proto.RegisterType((*LdpP2MpInterfaceRecord)(nil), "LdpP2mpInterfaceRecord")
	proto.RegisterType((*LabelDistributionProtocolP2MpIfStats)(nil), "LabelDistributionProtocolP2mpIfStats")
	proto.RegisterExtension(E_JnprLdpP2MpPerIfEgressExt)
}

func init() { proto.RegisterFile("ldp_p2mp_per_if_egress.proto", fileDescriptor_90ec76097a3bb737) }

var fileDescriptor_90ec76097a3bb737 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcd, 0x6e, 0xd4, 0x30,
	0x14, 0x85, 0xe5, 0xe9, 0x94, 0xb6, 0x4e, 0x60, 0xe1, 0x4a, 0x34, 0xfc, 0x88, 0x46, 0x11, 0xa0,
	0xac, 0xb2, 0xc8, 0x12, 0x09, 0x09, 0x21, 0x2a, 0xd1, 0xaa, 0xaa, 0x46, 0x9e, 0x07, 0xb0, 0x3c,
	0x99, 0x1b, 0x64, 0x9a, 0xc4, 0xc6, 0xbe, 0x23, 0x66, 0xb6, 0x3c, 0x07, 0x0f, 0xc1, 0xe3, 0xb1,
	0x44, 0xb6, 0x03, 0x33, 0xd2, 0xcc, 0x82, 0x2e, 0x7d, 0xce, 0x77, 0x8e, 0x7c, 0xaf, 0x2e, 0x7d,
	0xd9, 0x2d, 0x8d, 0x30, 0x75, 0x6f, 0x84, 0x01, 0x2b, 0x54, 0x2b, 0xe0, 0x8b, 0x05, 0xe7, 0x2a,
	0x63, 0x35, 0xea, 0xe7, 0xe7, 0x08, 0x1d, 0xf4, 0x80, 0x76, 0x23, 0x50, 0x9b, 0x28, 0x16, 0x73,
	0xca, 0x6e, 0x97, 0x66, 0x56, 0xf7, 0x66, 0x06, 0xf6, 0xba, 0xbd, 0x0a, 0x01, 0xf6, 0x9e, 0x3e,
	0x19, 0x1b, 0x2c, 0x34, 0xda, 0x2e, 0x5d, 0x46, 0xf2, 0xa3, 0x32, 0xa9, 0x2f, 0xaa, 0x11, 0xbe,
	0x1e, 0x10, 0x6c, 0x2b, 0x1b, 0xe0, 0xc1, 0xe7, 0xa9, 0xf1, 0xe9, 0xf8, 0x70, 0xc5, 0x6f, 0x42,
	0x9f, 0x1e, 0x06, 0xd9, 0x2b, 0x7a, 0xa2, 0x5a, 0x31, 0xc8, 0x1e, 0x32, 0x92, 0x4f, 0xca, 0xb3,
	0x8f, 0xc7, 0x3f, 0x3e, 0x4c, 0x4e, 0x09, 0x7f, 0xa4, 0xda, 0x3b, 0xd9, 0x03, 0x2b, 0x69, 0xda,
	0xe8, 0x95, 0x0f, 0x45, 0x68, 0x92, 0x93, 0x2d, 0x94, 0x8c, 0x56, 0x20, 0x6f, 0xe8, 0x63, 0x35,
	0x84, 0xef, 0x0a, 0x87, 0x12, 0x5d, 0x76, 0x94, 0x93, 0x32, 0xa9, 0xdf, 0x54, 0xb7, 0x72, 0x01,
	0xdd, 0x27, 0xe5, 0xd0, 0xaa, 0xc5, 0x0a, 0x95, 0x1e, 0x66, 0x7e, 0xd2, 0x46, 0x77, 0xe1, 0x3f,
	0xed, 0xdc, 0xc3, 0x3c, 0x1d, 0xb3, 0xe1, 0xc5, 0x3e, 0xd3, 0x14, 0x76, 0xab, 0xa6, 0x0f, 0xa9,
	0x4a, 0x60, 0xdb, 0x54, 0xfc, 0x22, 0xf4, 0xf5, 0xff, 0xa4, 0xd8, 0x25, 0x3d, 0x31, 0xb2, 0xb9,
	0x07, 0xf4, 0xbb, 0x25, 0xe5, 0x34, 0xcc, 0x98, 0x11, 0xfe, 0x57, 0x65, 0x2f, 0xe8, 0xf1, 0x62,
	0x83, 0xe0, 0xc2, 0x0a, 0xfe, 0xd9, 0x51, 0x63, 0x6f, 0x69, 0x12, 0x39, 0x61, 0x25, 0x42, 0x18,
	0x3d, 0x22, 0x39, 0xe1, 0x34, 0x3a, 0x5c, 0x22, 0xb0, 0x82, 0x9e, 0xf9, 0x40, 0xa4, 0xa6, 0xbb,
	0xd4, 0xa9, 0xd7, 0x3d, 0xf3, 0xee, 0x1b, 0xbd, 0xfc, 0x3a, 0x18, 0x2b, 0x0e, 0x1f, 0x8f, 0x80,
	0x35, 0xb2, 0x8b, 0xea, 0x66, 0x35, 0x28, 0x03, 0xf6, 0x0e, 0xf0, 0xbb, 0xb6, 0xf7, 0x6e, 0x0e,
	0x83, 0xd3, 0xd6, 0x65, 0x3f, 0x49, 0xd8, 0xd4, 0x79, 0xb5, 0x7f, 0x44, 0xfc, 0x99, 0x6f, 0xdd,
	0xd7, 0xaf, 0xd6, 0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x5a, 0xe7, 0x65, 0xa9, 0x02, 0x00,
	0x00,
}
