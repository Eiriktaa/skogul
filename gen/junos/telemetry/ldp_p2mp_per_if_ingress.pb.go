// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ldp_p2mp_per_if_ingress.proto

package telemetry

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type LdpP2MpPerIfIngress struct {
	// List of LDP P2mp stats per IF ingress records
	PerIfRecords         []*LdpP2MpIngIfRecord `protobuf:"bytes,1,rep,name=per_if_records,json=perIfRecords" json:"per_if_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *LdpP2MpPerIfIngress) Reset()         { *m = LdpP2MpPerIfIngress{} }
func (m *LdpP2MpPerIfIngress) String() string { return proto.CompactTextString(m) }
func (*LdpP2MpPerIfIngress) ProtoMessage()    {}
func (*LdpP2MpPerIfIngress) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aec5355035b7126, []int{0}
}
func (m *LdpP2MpPerIfIngress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LdpP2MpPerIfIngress.Unmarshal(m, b)
}
func (m *LdpP2MpPerIfIngress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LdpP2MpPerIfIngress.Marshal(b, m, deterministic)
}
func (m *LdpP2MpPerIfIngress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LdpP2MpPerIfIngress.Merge(m, src)
}
func (m *LdpP2MpPerIfIngress) XXX_Size() int {
	return xxx_messageInfo_LdpP2MpPerIfIngress.Size(m)
}
func (m *LdpP2MpPerIfIngress) XXX_DiscardUnknown() {
	xxx_messageInfo_LdpP2MpPerIfIngress.DiscardUnknown(m)
}

var xxx_messageInfo_LdpP2MpPerIfIngress proto.InternalMessageInfo

func (m *LdpP2MpPerIfIngress) GetPerIfRecords() []*LdpP2MpIngIfRecord {
	if m != nil {
		return m.PerIfRecords
	}
	return nil
}

//
// SR statistics record
//
type LdpP2MpIngIfRecord struct {
	// Interface name, e.g., xe-0/0/0
	IfName *string `protobuf:"bytes,1,req,name=if_name,json=ifName" json:"if_name,omitempty"`
	// Name of the counter. This is useful when an interface has multiple counters.
	// for some scenarios, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,2,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Traffic statistics
	IngressStats         *LabelDistributionProtocolP2MpIngIfStats `protobuf:"bytes,3,opt,name=ingress_stats,json=ingressStats" json:"ingress_stats,omitempty"`
	EgressStats          *LabelDistributionProtocolP2MpIngIfStats `protobuf:"bytes,4,opt,name=egress_stats,json=egressStats" json:"egress_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *LdpP2MpIngIfRecord) Reset()         { *m = LdpP2MpIngIfRecord{} }
func (m *LdpP2MpIngIfRecord) String() string { return proto.CompactTextString(m) }
func (*LdpP2MpIngIfRecord) ProtoMessage()    {}
func (*LdpP2MpIngIfRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aec5355035b7126, []int{1}
}
func (m *LdpP2MpIngIfRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LdpP2MpIngIfRecord.Unmarshal(m, b)
}
func (m *LdpP2MpIngIfRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LdpP2MpIngIfRecord.Marshal(b, m, deterministic)
}
func (m *LdpP2MpIngIfRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LdpP2MpIngIfRecord.Merge(m, src)
}
func (m *LdpP2MpIngIfRecord) XXX_Size() int {
	return xxx_messageInfo_LdpP2MpIngIfRecord.Size(m)
}
func (m *LdpP2MpIngIfRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LdpP2MpIngIfRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LdpP2MpIngIfRecord proto.InternalMessageInfo

func (m *LdpP2MpIngIfRecord) GetIfName() string {
	if m != nil && m.IfName != nil {
		return *m.IfName
	}
	return ""
}

func (m *LdpP2MpIngIfRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *LdpP2MpIngIfRecord) GetIngressStats() *LabelDistributionProtocolP2MpIngIfStats {
	if m != nil {
		return m.IngressStats
	}
	return nil
}

func (m *LdpP2MpIngIfRecord) GetEgressStats() *LabelDistributionProtocolP2MpIngIfStats {
	if m != nil {
		return m.EgressStats
	}
	return nil
}

type LabelDistributionProtocolP2MpIngIfStats struct {
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters.
	PacketRate           *uint64  `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate             *uint64  `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelDistributionProtocolP2MpIngIfStats) Reset() {
	*m = LabelDistributionProtocolP2MpIngIfStats{}
}
func (m *LabelDistributionProtocolP2MpIngIfStats) String() string { return proto.CompactTextString(m) }
func (*LabelDistributionProtocolP2MpIngIfStats) ProtoMessage()    {}
func (*LabelDistributionProtocolP2MpIngIfStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aec5355035b7126, []int{2}
}
func (m *LabelDistributionProtocolP2MpIngIfStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelDistributionProtocolP2MpIngIfStats.Unmarshal(m, b)
}
func (m *LabelDistributionProtocolP2MpIngIfStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelDistributionProtocolP2MpIngIfStats.Marshal(b, m, deterministic)
}
func (m *LabelDistributionProtocolP2MpIngIfStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelDistributionProtocolP2MpIngIfStats.Merge(m, src)
}
func (m *LabelDistributionProtocolP2MpIngIfStats) XXX_Size() int {
	return xxx_messageInfo_LabelDistributionProtocolP2MpIngIfStats.Size(m)
}
func (m *LabelDistributionProtocolP2MpIngIfStats) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelDistributionProtocolP2MpIngIfStats.DiscardUnknown(m)
}

var xxx_messageInfo_LabelDistributionProtocolP2MpIngIfStats proto.InternalMessageInfo

func (m *LabelDistributionProtocolP2MpIngIfStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpIngIfStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpIngIfStats) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpIngIfStats) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprLdpP2MpPerIfIngressExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*LdpP2MpPerIfIngress)(nil),
	Field:         157,
	Name:          "jnpr_ldp_p2mp_per_if_ingress_ext",
	Tag:           "bytes,157,opt,name=jnpr_ldp_p2mp_per_if_ingress_ext",
	Filename:      "ldp_p2mp_per_if_ingress.proto",
}

func init() {
	proto.RegisterType((*LdpP2MpPerIfIngress)(nil), "LdpP2mpPerIfIngress")
	proto.RegisterType((*LdpP2MpIngIfRecord)(nil), "LdpP2mpIngIfRecord")
	proto.RegisterType((*LabelDistributionProtocolP2MpIngIfStats)(nil), "LabelDistributionProtocolP2mpIngIfStats")
	proto.RegisterExtension(E_JnprLdpP2MpPerIfIngressExt)
}

func init() { proto.RegisterFile("ldp_p2mp_per_if_ingress.proto", fileDescriptor_4aec5355035b7126) }

var fileDescriptor_4aec5355035b7126 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0xe5, 0x6e, 0x97, 0xdd, 0x75, 0x02, 0x07, 0x17, 0x89, 0x68, 0x11, 0x10, 0xe5, 0x00,
	0x39, 0xe5, 0x90, 0x1b, 0x9c, 0x10, 0x82, 0x43, 0x60, 0x59, 0x45, 0xde, 0x07, 0xb0, 0xd2, 0x74,
	0xb2, 0x32, 0x4d, 0x6c, 0xcb, 0x9e, 0x8a, 0xf6, 0xca, 0x7b, 0xf0, 0x14, 0xbc, 0x1d, 0x27, 0xe4,
	0x38, 0xb4, 0x95, 0x28, 0x12, 0x1c, 0x3d, 0xff, 0xf7, 0xff, 0xf2, 0xfc, 0x1a, 0xfa, 0xac, 0x5f,
	0x19, 0x61, 0xca, 0xc1, 0x08, 0x03, 0x56, 0xc8, 0x4e, 0x48, 0x75, 0x6f, 0xc1, 0xb9, 0xc2, 0x58,
	0x8d, 0xfa, 0x7a, 0x81, 0xd0, 0xc3, 0x00, 0x68, 0x77, 0x02, 0xb5, 0x09, 0xc3, 0xac, 0xa6, 0x8b,
	0x9b, 0x95, 0xa9, 0xcb, 0xc1, 0xd4, 0x60, 0xab, 0xae, 0x0a, 0x0e, 0xf6, 0x9a, 0x3e, 0x9a, 0x32,
	0x2c, 0xb4, 0xda, 0xae, 0x5c, 0x42, 0xd2, 0xb3, 0x3c, 0x2a, 0x17, 0xc5, 0x44, 0x57, 0xea, 0xbe,
	0xea, 0xf8, 0xa8, 0xf1, 0xd8, 0x78, 0x6b, 0x78, 0xb8, 0xec, 0x27, 0xa1, 0xec, 0x4f, 0x88, 0x3d,
	0xa7, 0x17, 0xb2, 0x13, 0xaa, 0x19, 0x20, 0x21, 0xe9, 0x2c, 0xbf, 0x7a, 0x77, 0xfe, 0xed, 0xed,
	0xec, 0x92, 0xf0, 0x07, 0xb2, 0xbb, 0x6d, 0x06, 0x60, 0x39, 0x8d, 0x5b, 0xbd, 0x51, 0x08, 0x36,
	0x40, 0xb3, 0x94, 0x1c, 0xa0, 0x68, 0x92, 0x46, 0xf2, 0x33, 0x7d, 0x38, 0x2d, 0x26, 0x1c, 0x36,
	0xe8, 0x92, 0xb3, 0x94, 0xe4, 0x51, 0x99, 0x17, 0x37, 0xcd, 0x12, 0xfa, 0xf7, 0xd2, 0xa1, 0x95,
	0xcb, 0x0d, 0x4a, 0xad, 0x6a, 0xbf, 0x62, 0xab, 0xfb, 0xfd, 0x5f, 0xee, 0x3c, 0xcf, 0xe3, 0xc9,
	0x3e, 0xbe, 0xd8, 0x27, 0x1a, 0xc3, 0x71, 0xda, 0xfc, 0x3f, 0xd3, 0x22, 0x38, 0x84, 0x65, 0x3f,
	0x08, 0x7d, 0xf5, 0x8f, 0x46, 0xf6, 0x82, 0x5e, 0x98, 0xa6, 0x5d, 0x03, 0xfa, 0x72, 0x49, 0x3e,
	0x1f, 0x97, 0x4d, 0x08, 0xff, 0x3d, 0x65, 0x4f, 0xe9, 0xf9, 0x72, 0x87, 0xe0, 0xc6, 0x2e, 0xf6,
	0x72, 0x98, 0xb1, 0x97, 0x34, 0x0a, 0x9c, 0xb0, 0x0d, 0xc2, 0xd8, 0x41, 0x40, 0x52, 0xc2, 0x69,
	0x50, 0x78, 0x83, 0xc0, 0x32, 0x7a, 0xe5, 0x0d, 0x81, 0x9a, 0x1f, 0x53, 0x97, 0x7e, 0xee, 0x99,
	0x37, 0x48, 0xd3, 0x2f, 0xca, 0x58, 0xf1, 0x97, 0xfb, 0x11, 0xb0, 0x45, 0xf6, 0xa4, 0xf8, 0xb8,
	0x51, 0xd2, 0x80, 0xbd, 0x05, 0xfc, 0xaa, 0xed, 0xda, 0xdd, 0x81, 0x72, 0xda, 0xba, 0xe4, 0x3b,
	0x19, 0x0b, 0x7b, 0x5c, 0x9c, 0xb8, 0x23, 0x7e, 0xed, 0x73, 0x4f, 0x08, 0x1f, 0xb6, 0xf8, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0xdc, 0x56, 0xeb, 0x5d, 0xaf, 0x02, 0x00, 0x00,
}
